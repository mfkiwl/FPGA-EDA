// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2023 12:35:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LED_XS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LED_XS_vlg_sample_tst(
	day_en,
	hour_en,
	min_en,
	mon_en,
	sec_en,
	week_en,
	year_en,
	sampler_tx
);
input  day_en;
input  hour_en;
input  min_en;
input  mon_en;
input  sec_en;
input  week_en;
input  year_en;
output sampler_tx;

reg sample;
time current_time;
always @(day_en or hour_en or min_en or mon_en or sec_en or week_en or year_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LED_XS_vlg_check_tst (
	led1,
	led2,
	led3,
	led4,
	led5,
	led6,
	led7,
	led8,
	sampler_rx
);
input  led1;
input  led2;
input  led3;
input  led4;
input  led5;
input  led6;
input  led7;
input  led8;
input sampler_rx;

reg  led1_expected;
reg  led2_expected;
reg  led3_expected;
reg  led4_expected;
reg  led5_expected;
reg  led6_expected;
reg  led7_expected;
reg  led8_expected;

reg  led1_prev;
reg  led2_prev;
reg  led3_prev;
reg  led4_prev;
reg  led5_prev;
reg  led6_prev;
reg  led7_prev;
reg  led8_prev;

reg  led1_expected_prev;
reg  led2_expected_prev;
reg  led3_expected_prev;
reg  led4_expected_prev;
reg  led5_expected_prev;
reg  led6_expected_prev;
reg  led7_expected_prev;
reg  led8_expected_prev;

reg  last_led1_exp;
reg  last_led2_exp;
reg  last_led3_exp;
reg  last_led4_exp;
reg  last_led5_exp;
reg  last_led6_exp;
reg  last_led7_exp;
reg  last_led8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	led1_prev = led1;
	led2_prev = led2;
	led3_prev = led3;
	led4_prev = led4;
	led5_prev = led5;
	led6_prev = led6;
	led7_prev = led7;
	led8_prev = led8;
end

// update expected /o prevs

always @(trigger)
begin
	led1_expected_prev = led1_expected;
	led2_expected_prev = led2_expected;
	led3_expected_prev = led3_expected;
	led4_expected_prev = led4_expected;
	led5_expected_prev = led5_expected;
	led6_expected_prev = led6_expected;
	led7_expected_prev = led7_expected;
	led8_expected_prev = led8_expected;
end



// expected led1
initial
begin
	led1_expected = 1'bX;
end 

// expected led2
initial
begin
	led2_expected = 1'bX;
end 

// expected led3
initial
begin
	led3_expected = 1'bX;
end 

// expected led4
initial
begin
	led4_expected = 1'bX;
end 

// expected led5
initial
begin
	led5_expected = 1'bX;
end 

// expected led6
initial
begin
	led6_expected = 1'bX;
end 

// expected led7
initial
begin
	led7_expected = 1'bX;
end 

// expected led8
initial
begin
	led8_expected = 1'bX;
end 
// generate trigger
always @(led1_expected or led1 or led2_expected or led2 or led3_expected or led3 or led4_expected or led4 or led5_expected or led5 or led6_expected or led6 or led7_expected or led7 or led8_expected or led8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led1 = %b | expected led2 = %b | expected led3 = %b | expected led4 = %b | expected led5 = %b | expected led6 = %b | expected led7 = %b | expected led8 = %b | ",led1_expected_prev,led2_expected_prev,led3_expected_prev,led4_expected_prev,led5_expected_prev,led6_expected_prev,led7_expected_prev,led8_expected_prev);
	$display("| real led1 = %b | real led2 = %b | real led3 = %b | real led4 = %b | real led5 = %b | real led6 = %b | real led7 = %b | real led8 = %b | ",led1_prev,led2_prev,led3_prev,led4_prev,led5_prev,led6_prev,led7_prev,led8_prev);
`endif
	if (
		( led1_expected_prev !== 1'bx ) && ( led1_prev !== led1_expected_prev )
		&& ((led1_expected_prev !== last_led1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led1_expected_prev);
		$display ("     Real value = %b", led1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led1_exp = led1_expected_prev;
	end
	if (
		( led2_expected_prev !== 1'bx ) && ( led2_prev !== led2_expected_prev )
		&& ((led2_expected_prev !== last_led2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led2_exp = led2_expected_prev;
	end
	if (
		( led3_expected_prev !== 1'bx ) && ( led3_prev !== led3_expected_prev )
		&& ((led3_expected_prev !== last_led3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led3_expected_prev);
		$display ("     Real value = %b", led3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led3_exp = led3_expected_prev;
	end
	if (
		( led4_expected_prev !== 1'bx ) && ( led4_prev !== led4_expected_prev )
		&& ((led4_expected_prev !== last_led4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led4_expected_prev);
		$display ("     Real value = %b", led4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led4_exp = led4_expected_prev;
	end
	if (
		( led5_expected_prev !== 1'bx ) && ( led5_prev !== led5_expected_prev )
		&& ((led5_expected_prev !== last_led5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led5_expected_prev);
		$display ("     Real value = %b", led5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led5_exp = led5_expected_prev;
	end
	if (
		( led6_expected_prev !== 1'bx ) && ( led6_prev !== led6_expected_prev )
		&& ((led6_expected_prev !== last_led6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led6_expected_prev);
		$display ("     Real value = %b", led6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led6_exp = led6_expected_prev;
	end
	if (
		( led7_expected_prev !== 1'bx ) && ( led7_prev !== led7_expected_prev )
		&& ((led7_expected_prev !== last_led7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led7_expected_prev);
		$display ("     Real value = %b", led7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led7_exp = led7_expected_prev;
	end
	if (
		( led8_expected_prev !== 1'bx ) && ( led8_prev !== led8_expected_prev )
		&& ((led8_expected_prev !== last_led8_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led8_expected_prev);
		$display ("     Real value = %b", led8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_led8_exp = led8_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LED_XS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg day_en;
reg hour_en;
reg min_en;
reg mon_en;
reg sec_en;
reg week_en;
reg year_en;
// wires                                               
wire led1;
wire led2;
wire led3;
wire led4;
wire led5;
wire led6;
wire led7;
wire led8;

wire sampler;                             

// assign statements (if any)                          
LED_XS i1 (
// port map - connection between master ports and signals/registers   
	.day_en(day_en),
	.hour_en(hour_en),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led5(led5),
	.led6(led6),
	.led7(led7),
	.led8(led8),
	.min_en(min_en),
	.mon_en(mon_en),
	.sec_en(sec_en),
	.week_en(week_en),
	.year_en(year_en)
);

// sec_en
initial
begin
	sec_en = 1'b1;
	sec_en = #10000 1'b0;
	sec_en = #10000 1'b1;
	sec_en = #20000 1'b0;
end 

// min_en
initial
begin
	min_en = 1'b1;
	min_en = #20000 1'b0;
	min_en = #10000 1'b1;
	min_en = #20000 1'b0;
end 

// hour_en
initial
begin
	hour_en = 1'b1;
	hour_en = #30000 1'b0;
	hour_en = #10000 1'b1;
	hour_en = #30000 1'b0;
end 

// day_en
initial
begin
	day_en = 1'b1;
	day_en = #40000 1'b0;
	day_en = #10000 1'b1;
	day_en = #30000 1'b0;
end 

// mon_en
initial
begin
	mon_en = 1'b1;
	mon_en = #50000 1'b0;
	mon_en = #10000 1'b1;
	mon_en = #20000 1'b0;
end 

// year_en
initial
begin
	year_en = 1'b1;
	year_en = #60000 1'b0;
	year_en = #10000 1'b1;
	year_en = #20000 1'b0;
end 

// week_en
initial
begin
	week_en = 1'b1;
	week_en = #70000 1'b0;
	week_en = #10000 1'b1;
	week_en = #20000 1'b0;
end 

LED_XS_vlg_sample_tst tb_sample (
	.day_en(day_en),
	.hour_en(hour_en),
	.min_en(min_en),
	.mon_en(mon_en),
	.sec_en(sec_en),
	.week_en(week_en),
	.year_en(year_en),
	.sampler_tx(sampler)
);

LED_XS_vlg_check_tst tb_out(
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led5(led5),
	.led6(led6),
	.led7(led7),
	.led8(led8),
	.sampler_rx(sampler)
);
endmodule

