// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2023 12:37:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    XSKZQ
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module XSKZQ_vlg_sample_tst(
	clk_scan,
	day,
	hour,
	min,
	mon,
	sec,
	week,
	year,
	sampler_tx
);
input  clk_scan;
input [4:0] day;
input [4:0] hour;
input [5:0] min;
input [3:0] mon;
input [5:0] sec;
input [2:0] week;
input [6:0] year;
output sampler_tx;

reg sample;
time current_time;
always @(clk_scan or day or hour or min or mon or sec or week or year)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module XSKZQ_vlg_check_tst (
	hbcd,
	lbcd,
	selout,
	sampler_rx
);
input [3:0] hbcd;
input [3:0] lbcd;
input [3:0] selout;
input sampler_rx;

reg [3:0] hbcd_expected;
reg [3:0] lbcd_expected;
reg [3:0] selout_expected;

reg [3:0] hbcd_prev;
reg [3:0] lbcd_prev;
reg [3:0] selout_prev;



reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	hbcd_prev = hbcd;
	lbcd_prev = lbcd;
	selout_prev = selout;
end

// update expected /o prevs

always @(trigger)
begin
end


// expected day[ 4 ]
initial
begin
	day_expected[4] = 1'bX;
end 
// expected day[ 3 ]
initial
begin
	day_expected[3] = 1'bX;
end 
// expected day[ 2 ]
initial
begin
	day_expected[2] = 1'bX;
end 
// expected day[ 1 ]
initial
begin
	day_expected[1] = 1'bX;
end 
// expected day[ 0 ]
initial
begin
	day_expected[0] = 1'bX;
end 
// expected hour[ 4 ]
initial
begin
	hour_expected[4] = 1'bX;
end 
// expected hour[ 3 ]
initial
begin
	hour_expected[3] = 1'bX;
end 
// expected hour[ 2 ]
initial
begin
	hour_expected[2] = 1'bX;
end 
// expected hour[ 1 ]
initial
begin
	hour_expected[1] = 1'bX;
end 
// expected hour[ 0 ]
initial
begin
	hour_expected[0] = 1'bX;
end 
// expected min[ 5 ]
initial
begin
	min_expected[5] = 1'bX;
end 
// expected min[ 4 ]
initial
begin
	min_expected[4] = 1'bX;
end 
// expected min[ 3 ]
initial
begin
	min_expected[3] = 1'bX;
end 
// expected min[ 2 ]
initial
begin
	min_expected[2] = 1'bX;
end 
// expected min[ 1 ]
initial
begin
	min_expected[1] = 1'bX;
end 
// expected min[ 0 ]
initial
begin
	min_expected[0] = 1'bX;
end 
// expected mon[ 3 ]
initial
begin
	mon_expected[3] = 1'bX;
end 
// expected mon[ 2 ]
initial
begin
	mon_expected[2] = 1'bX;
end 
// expected mon[ 1 ]
initial
begin
	mon_expected[1] = 1'bX;
end 
// expected mon[ 0 ]
initial
begin
	mon_expected[0] = 1'bX;
end 
// expected sec[ 5 ]
initial
begin
	sec_expected[5] = 1'bX;
end 
// expected sec[ 4 ]
initial
begin
	sec_expected[4] = 1'bX;
end 
// expected sec[ 3 ]
initial
begin
	sec_expected[3] = 1'bX;
end 
// expected sec[ 2 ]
initial
begin
	sec_expected[2] = 1'bX;
end 
// expected sec[ 1 ]
initial
begin
	sec_expected[1] = 1'bX;
end 
// expected sec[ 0 ]
initial
begin
	sec_expected[0] = 1'bX;
end 
// expected week[ 2 ]
initial
begin
	week_expected[2] = 1'bX;
end 
// expected week[ 1 ]
initial
begin
	week_expected[1] = 1'bX;
end 
// expected week[ 0 ]
initial
begin
	week_expected[0] = 1'bX;
end 
// expected year[ 6 ]
initial
begin
	year_expected[6] = 1'bX;
end 
// expected year[ 5 ]
initial
begin
	year_expected[5] = 1'bX;
end 
// expected year[ 4 ]
initial
begin
	year_expected[4] = 1'bX;
end 
// expected year[ 3 ]
initial
begin
	year_expected[3] = 1'bX;
end 
// expected year[ 2 ]
initial
begin
	year_expected[2] = 1'bX;
end 
// expected year[ 1 ]
initial
begin
	year_expected[1] = 1'bX;
end 
// expected year[ 0 ]
initial
begin
	year_expected[0] = 1'bX;
end 
// generate trigger
always @(hbcd_expected or hbcd or lbcd_expected or lbcd or selout_expected or selout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hbcd = %b | expected lbcd = %b | expected selout = %b | ",hbcd_expected_prev,lbcd_expected_prev,selout_expected_prev);
	$display("| real hbcd = %b | real lbcd = %b | real selout = %b | ",hbcd_prev,lbcd_prev,selout_prev);
`endif

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module XSKZQ_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_scan;
reg [4:0] day;
reg [4:0] hour;
reg [5:0] min;
reg [3:0] mon;
reg [5:0] sec;
reg [2:0] week;
reg [6:0] year;
// wires                                               
wire [3:0] hbcd;
wire [3:0] lbcd;
wire [3:0] selout;

wire sampler;                             

// assign statements (if any)                          
XSKZQ i1 (
// port map - connection between master ports and signals/registers   
	.clk_scan(clk_scan),
	.day(day),
	.hbcd(hbcd),
	.hour(hour),
	.lbcd(lbcd),
	.min(min),
	.mon(mon),
	.sec(sec),
	.selout(selout),
	.week(week),
	.year(year)
);

XSKZQ_vlg_sample_tst tb_sample (
	.clk_scan(clk_scan),
	.day(day),
	.hour(hour),
	.min(min),
	.mon(mon),
	.sec(sec),
	.week(week),
	.year(year),
	.sampler_tx(sampler)
);

XSKZQ_vlg_check_tst tb_out(
	.hbcd(hbcd),
	.lbcd(lbcd),
	.selout(selout),
	.sampler_rx(sampler)
);
endmodule

