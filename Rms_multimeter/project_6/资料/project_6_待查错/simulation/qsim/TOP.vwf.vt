// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2023 22:05:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TOP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TOP_vlg_sample_tst(
	clk24M,
	key,
	sampler_tx
);
input  clk24M;
input [2:0] key;
output sampler_tx;

reg sample;
time current_time;
always @(clk24M or key)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TOP_vlg_check_tst (
	ale1,
	ale2,
	dout,
	oe1,
	oe2,
	s_shizaigonglv,
	sel,
	start1,
	start2,
	sampler_rx
);
input  ale1;
input  ale2;
input [7:0] dout;
input  oe1;
input  oe2;
input [17:0] s_shizaigonglv;
input [7:0] sel;
input  start1;
input  start2;
input sampler_rx;

reg  ale1_expected;
reg  ale2_expected;
reg [7:0] dout_expected;
reg  oe1_expected;
reg  oe2_expected;
reg [17:0] s_shizaigonglv_expected;
reg [7:0] sel_expected;
reg  start1_expected;
reg  start2_expected;

reg  ale1_prev;
reg  ale2_prev;
reg [7:0] dout_prev;
reg  oe1_prev;
reg  oe2_prev;
reg [17:0] s_shizaigonglv_prev;
reg [7:0] sel_prev;
reg  start1_prev;
reg  start2_prev;

reg  ale1_expected_prev;
reg  ale2_expected_prev;
reg [7:0] dout_expected_prev;
reg  oe1_expected_prev;
reg  oe2_expected_prev;
reg [17:0] s_shizaigonglv_expected_prev;
reg [7:0] sel_expected_prev;
reg  start1_expected_prev;
reg  start2_expected_prev;

reg  last_ale1_exp;
reg  last_ale2_exp;
reg [7:0] last_dout_exp;
reg  last_oe1_exp;
reg  last_oe2_exp;
reg [17:0] last_s_shizaigonglv_exp;
reg [7:0] last_sel_exp;
reg  last_start1_exp;
reg  last_start2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	ale1_prev = ale1;
	ale2_prev = ale2;
	dout_prev = dout;
	oe1_prev = oe1;
	oe2_prev = oe2;
	s_shizaigonglv_prev = s_shizaigonglv;
	sel_prev = sel;
	start1_prev = start1;
	start2_prev = start2;
end

// update expected /o prevs

always @(trigger)
begin
	ale1_expected_prev = ale1_expected;
	ale2_expected_prev = ale2_expected;
	dout_expected_prev = dout_expected;
	oe1_expected_prev = oe1_expected;
	oe2_expected_prev = oe2_expected;
	s_shizaigonglv_expected_prev = s_shizaigonglv_expected;
	sel_expected_prev = sel_expected;
	start1_expected_prev = start1_expected;
	start2_expected_prev = start2_expected;
end



// expected ale1
initial
begin
	ale1_expected = 1'bX;
end 

// expected ale2
initial
begin
	ale2_expected = 1'bX;
end 
// expected dout[ 7 ]
initial
begin
	dout_expected[7] = 1'bX;
end 
// expected dout[ 6 ]
initial
begin
	dout_expected[6] = 1'bX;
end 
// expected dout[ 5 ]
initial
begin
	dout_expected[5] = 1'bX;
end 
// expected dout[ 4 ]
initial
begin
	dout_expected[4] = 1'bX;
end 
// expected dout[ 3 ]
initial
begin
	dout_expected[3] = 1'bX;
end 
// expected dout[ 2 ]
initial
begin
	dout_expected[2] = 1'bX;
end 
// expected dout[ 1 ]
initial
begin
	dout_expected[1] = 1'bX;
end 
// expected dout[ 0 ]
initial
begin
	dout_expected[0] = 1'bX;
end 

// expected oe1
initial
begin
	oe1_expected = 1'bX;
end 

// expected oe2
initial
begin
	oe2_expected = 1'bX;
end 
// expected s_shizaigonglv[ 17 ]
initial
begin
	s_shizaigonglv_expected[17] = 1'bX;
end 
// expected s_shizaigonglv[ 16 ]
initial
begin
	s_shizaigonglv_expected[16] = 1'bX;
end 
// expected s_shizaigonglv[ 15 ]
initial
begin
	s_shizaigonglv_expected[15] = 1'bX;
end 
// expected s_shizaigonglv[ 14 ]
initial
begin
	s_shizaigonglv_expected[14] = 1'bX;
end 
// expected s_shizaigonglv[ 13 ]
initial
begin
	s_shizaigonglv_expected[13] = 1'bX;
end 
// expected s_shizaigonglv[ 12 ]
initial
begin
	s_shizaigonglv_expected[12] = 1'bX;
end 
// expected s_shizaigonglv[ 11 ]
initial
begin
	s_shizaigonglv_expected[11] = 1'bX;
end 
// expected s_shizaigonglv[ 10 ]
initial
begin
	s_shizaigonglv_expected[10] = 1'bX;
end 
// expected s_shizaigonglv[ 9 ]
initial
begin
	s_shizaigonglv_expected[9] = 1'bX;
end 
// expected s_shizaigonglv[ 8 ]
initial
begin
	s_shizaigonglv_expected[8] = 1'bX;
end 
// expected s_shizaigonglv[ 7 ]
initial
begin
	s_shizaigonglv_expected[7] = 1'bX;
end 
// expected s_shizaigonglv[ 6 ]
initial
begin
	s_shizaigonglv_expected[6] = 1'bX;
end 
// expected s_shizaigonglv[ 5 ]
initial
begin
	s_shizaigonglv_expected[5] = 1'bX;
end 
// expected s_shizaigonglv[ 4 ]
initial
begin
	s_shizaigonglv_expected[4] = 1'bX;
end 
// expected s_shizaigonglv[ 3 ]
initial
begin
	s_shizaigonglv_expected[3] = 1'bX;
end 
// expected s_shizaigonglv[ 2 ]
initial
begin
	s_shizaigonglv_expected[2] = 1'bX;
end 
// expected s_shizaigonglv[ 1 ]
initial
begin
	s_shizaigonglv_expected[1] = 1'bX;
end 
// expected s_shizaigonglv[ 0 ]
initial
begin
	s_shizaigonglv_expected[0] = 1'bX;
end 
// expected sel[ 7 ]
initial
begin
	sel_expected[7] = 1'bX;
end 
// expected sel[ 6 ]
initial
begin
	sel_expected[6] = 1'bX;
end 
// expected sel[ 5 ]
initial
begin
	sel_expected[5] = 1'bX;
end 
// expected sel[ 4 ]
initial
begin
	sel_expected[4] = 1'bX;
end 
// expected sel[ 3 ]
initial
begin
	sel_expected[3] = 1'bX;
end 
// expected sel[ 2 ]
initial
begin
	sel_expected[2] = 1'bX;
end 
// expected sel[ 1 ]
initial
begin
	sel_expected[1] = 1'bX;
end 
// expected sel[ 0 ]
initial
begin
	sel_expected[0] = 1'bX;
end 

// expected start1
initial
begin
	start1_expected = 1'bX;
end 

// expected start2
initial
begin
	start2_expected = 1'bX;
end 
// generate trigger
always @(ale1_expected or ale1 or ale2_expected or ale2 or dout_expected or dout or oe1_expected or oe1 or oe2_expected or oe2 or s_shizaigonglv_expected or s_shizaigonglv or sel_expected or sel or start1_expected or start1 or start2_expected or start2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ale1 = %b | expected ale2 = %b | expected dout = %b | expected oe1 = %b | expected oe2 = %b | expected s_shizaigonglv = %b | expected sel = %b | expected start1 = %b | expected start2 = %b | ",ale1_expected_prev,ale2_expected_prev,dout_expected_prev,oe1_expected_prev,oe2_expected_prev,s_shizaigonglv_expected_prev,sel_expected_prev,start1_expected_prev,start2_expected_prev);
	$display("| real ale1 = %b | real ale2 = %b | real dout = %b | real oe1 = %b | real oe2 = %b | real s_shizaigonglv = %b | real sel = %b | real start1 = %b | real start2 = %b | ",ale1_prev,ale2_prev,dout_prev,oe1_prev,oe2_prev,s_shizaigonglv_prev,sel_prev,start1_prev,start2_prev);
`endif
	if (
		( ale1_expected_prev !== 1'bx ) && ( ale1_prev !== ale1_expected_prev )
		&& ((ale1_expected_prev !== last_ale1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ale1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ale1_expected_prev);
		$display ("     Real value = %b", ale1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ale1_exp = ale1_expected_prev;
	end
	if (
		( ale2_expected_prev !== 1'bx ) && ( ale2_prev !== ale2_expected_prev )
		&& ((ale2_expected_prev !== last_ale2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ale2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ale2_expected_prev);
		$display ("     Real value = %b", ale2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ale2_exp = ale2_expected_prev;
	end
	if (
		( dout_expected_prev[0] !== 1'bx ) && ( dout_prev[0] !== dout_expected_prev[0] )
		&& ((dout_expected_prev[0] !== last_dout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[0] = dout_expected_prev[0];
	end
	if (
		( dout_expected_prev[1] !== 1'bx ) && ( dout_prev[1] !== dout_expected_prev[1] )
		&& ((dout_expected_prev[1] !== last_dout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[1] = dout_expected_prev[1];
	end
	if (
		( dout_expected_prev[2] !== 1'bx ) && ( dout_prev[2] !== dout_expected_prev[2] )
		&& ((dout_expected_prev[2] !== last_dout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[2] = dout_expected_prev[2];
	end
	if (
		( dout_expected_prev[3] !== 1'bx ) && ( dout_prev[3] !== dout_expected_prev[3] )
		&& ((dout_expected_prev[3] !== last_dout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[3] = dout_expected_prev[3];
	end
	if (
		( dout_expected_prev[4] !== 1'bx ) && ( dout_prev[4] !== dout_expected_prev[4] )
		&& ((dout_expected_prev[4] !== last_dout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[4] = dout_expected_prev[4];
	end
	if (
		( dout_expected_prev[5] !== 1'bx ) && ( dout_prev[5] !== dout_expected_prev[5] )
		&& ((dout_expected_prev[5] !== last_dout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[5] = dout_expected_prev[5];
	end
	if (
		( dout_expected_prev[6] !== 1'bx ) && ( dout_prev[6] !== dout_expected_prev[6] )
		&& ((dout_expected_prev[6] !== last_dout_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[6] = dout_expected_prev[6];
	end
	if (
		( dout_expected_prev[7] !== 1'bx ) && ( dout_prev[7] !== dout_expected_prev[7] )
		&& ((dout_expected_prev[7] !== last_dout_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout_exp[7] = dout_expected_prev[7];
	end
	if (
		( oe1_expected_prev !== 1'bx ) && ( oe1_prev !== oe1_expected_prev )
		&& ((oe1_expected_prev !== last_oe1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oe1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oe1_expected_prev);
		$display ("     Real value = %b", oe1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oe1_exp = oe1_expected_prev;
	end
	if (
		( oe2_expected_prev !== 1'bx ) && ( oe2_prev !== oe2_expected_prev )
		&& ((oe2_expected_prev !== last_oe2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oe2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oe2_expected_prev);
		$display ("     Real value = %b", oe2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oe2_exp = oe2_expected_prev;
	end
	if (
		( s_shizaigonglv_expected_prev[0] !== 1'bx ) && ( s_shizaigonglv_prev[0] !== s_shizaigonglv_expected_prev[0] )
		&& ((s_shizaigonglv_expected_prev[0] !== last_s_shizaigonglv_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[0] = s_shizaigonglv_expected_prev[0];
	end
	if (
		( s_shizaigonglv_expected_prev[1] !== 1'bx ) && ( s_shizaigonglv_prev[1] !== s_shizaigonglv_expected_prev[1] )
		&& ((s_shizaigonglv_expected_prev[1] !== last_s_shizaigonglv_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[1] = s_shizaigonglv_expected_prev[1];
	end
	if (
		( s_shizaigonglv_expected_prev[2] !== 1'bx ) && ( s_shizaigonglv_prev[2] !== s_shizaigonglv_expected_prev[2] )
		&& ((s_shizaigonglv_expected_prev[2] !== last_s_shizaigonglv_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[2] = s_shizaigonglv_expected_prev[2];
	end
	if (
		( s_shizaigonglv_expected_prev[3] !== 1'bx ) && ( s_shizaigonglv_prev[3] !== s_shizaigonglv_expected_prev[3] )
		&& ((s_shizaigonglv_expected_prev[3] !== last_s_shizaigonglv_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[3] = s_shizaigonglv_expected_prev[3];
	end
	if (
		( s_shizaigonglv_expected_prev[4] !== 1'bx ) && ( s_shizaigonglv_prev[4] !== s_shizaigonglv_expected_prev[4] )
		&& ((s_shizaigonglv_expected_prev[4] !== last_s_shizaigonglv_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[4] = s_shizaigonglv_expected_prev[4];
	end
	if (
		( s_shizaigonglv_expected_prev[5] !== 1'bx ) && ( s_shizaigonglv_prev[5] !== s_shizaigonglv_expected_prev[5] )
		&& ((s_shizaigonglv_expected_prev[5] !== last_s_shizaigonglv_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[5] = s_shizaigonglv_expected_prev[5];
	end
	if (
		( s_shizaigonglv_expected_prev[6] !== 1'bx ) && ( s_shizaigonglv_prev[6] !== s_shizaigonglv_expected_prev[6] )
		&& ((s_shizaigonglv_expected_prev[6] !== last_s_shizaigonglv_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[6] = s_shizaigonglv_expected_prev[6];
	end
	if (
		( s_shizaigonglv_expected_prev[7] !== 1'bx ) && ( s_shizaigonglv_prev[7] !== s_shizaigonglv_expected_prev[7] )
		&& ((s_shizaigonglv_expected_prev[7] !== last_s_shizaigonglv_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[7] = s_shizaigonglv_expected_prev[7];
	end
	if (
		( s_shizaigonglv_expected_prev[8] !== 1'bx ) && ( s_shizaigonglv_prev[8] !== s_shizaigonglv_expected_prev[8] )
		&& ((s_shizaigonglv_expected_prev[8] !== last_s_shizaigonglv_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[8] = s_shizaigonglv_expected_prev[8];
	end
	if (
		( s_shizaigonglv_expected_prev[9] !== 1'bx ) && ( s_shizaigonglv_prev[9] !== s_shizaigonglv_expected_prev[9] )
		&& ((s_shizaigonglv_expected_prev[9] !== last_s_shizaigonglv_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[9] = s_shizaigonglv_expected_prev[9];
	end
	if (
		( s_shizaigonglv_expected_prev[10] !== 1'bx ) && ( s_shizaigonglv_prev[10] !== s_shizaigonglv_expected_prev[10] )
		&& ((s_shizaigonglv_expected_prev[10] !== last_s_shizaigonglv_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[10] = s_shizaigonglv_expected_prev[10];
	end
	if (
		( s_shizaigonglv_expected_prev[11] !== 1'bx ) && ( s_shizaigonglv_prev[11] !== s_shizaigonglv_expected_prev[11] )
		&& ((s_shizaigonglv_expected_prev[11] !== last_s_shizaigonglv_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[11] = s_shizaigonglv_expected_prev[11];
	end
	if (
		( s_shizaigonglv_expected_prev[12] !== 1'bx ) && ( s_shizaigonglv_prev[12] !== s_shizaigonglv_expected_prev[12] )
		&& ((s_shizaigonglv_expected_prev[12] !== last_s_shizaigonglv_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[12] = s_shizaigonglv_expected_prev[12];
	end
	if (
		( s_shizaigonglv_expected_prev[13] !== 1'bx ) && ( s_shizaigonglv_prev[13] !== s_shizaigonglv_expected_prev[13] )
		&& ((s_shizaigonglv_expected_prev[13] !== last_s_shizaigonglv_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[13] = s_shizaigonglv_expected_prev[13];
	end
	if (
		( s_shizaigonglv_expected_prev[14] !== 1'bx ) && ( s_shizaigonglv_prev[14] !== s_shizaigonglv_expected_prev[14] )
		&& ((s_shizaigonglv_expected_prev[14] !== last_s_shizaigonglv_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[14] = s_shizaigonglv_expected_prev[14];
	end
	if (
		( s_shizaigonglv_expected_prev[15] !== 1'bx ) && ( s_shizaigonglv_prev[15] !== s_shizaigonglv_expected_prev[15] )
		&& ((s_shizaigonglv_expected_prev[15] !== last_s_shizaigonglv_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[15] = s_shizaigonglv_expected_prev[15];
	end
	if (
		( s_shizaigonglv_expected_prev[16] !== 1'bx ) && ( s_shizaigonglv_prev[16] !== s_shizaigonglv_expected_prev[16] )
		&& ((s_shizaigonglv_expected_prev[16] !== last_s_shizaigonglv_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[16] = s_shizaigonglv_expected_prev[16];
	end
	if (
		( s_shizaigonglv_expected_prev[17] !== 1'bx ) && ( s_shizaigonglv_prev[17] !== s_shizaigonglv_expected_prev[17] )
		&& ((s_shizaigonglv_expected_prev[17] !== last_s_shizaigonglv_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_shizaigonglv[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_shizaigonglv_expected_prev);
		$display ("     Real value = %b", s_shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_shizaigonglv_exp[17] = s_shizaigonglv_expected_prev[17];
	end
	if (
		( sel_expected_prev[0] !== 1'bx ) && ( sel_prev[0] !== sel_expected_prev[0] )
		&& ((sel_expected_prev[0] !== last_sel_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[0] = sel_expected_prev[0];
	end
	if (
		( sel_expected_prev[1] !== 1'bx ) && ( sel_prev[1] !== sel_expected_prev[1] )
		&& ((sel_expected_prev[1] !== last_sel_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[1] = sel_expected_prev[1];
	end
	if (
		( sel_expected_prev[2] !== 1'bx ) && ( sel_prev[2] !== sel_expected_prev[2] )
		&& ((sel_expected_prev[2] !== last_sel_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[2] = sel_expected_prev[2];
	end
	if (
		( sel_expected_prev[3] !== 1'bx ) && ( sel_prev[3] !== sel_expected_prev[3] )
		&& ((sel_expected_prev[3] !== last_sel_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[3] = sel_expected_prev[3];
	end
	if (
		( sel_expected_prev[4] !== 1'bx ) && ( sel_prev[4] !== sel_expected_prev[4] )
		&& ((sel_expected_prev[4] !== last_sel_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[4] = sel_expected_prev[4];
	end
	if (
		( sel_expected_prev[5] !== 1'bx ) && ( sel_prev[5] !== sel_expected_prev[5] )
		&& ((sel_expected_prev[5] !== last_sel_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[5] = sel_expected_prev[5];
	end
	if (
		( sel_expected_prev[6] !== 1'bx ) && ( sel_prev[6] !== sel_expected_prev[6] )
		&& ((sel_expected_prev[6] !== last_sel_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[6] = sel_expected_prev[6];
	end
	if (
		( sel_expected_prev[7] !== 1'bx ) && ( sel_prev[7] !== sel_expected_prev[7] )
		&& ((sel_expected_prev[7] !== last_sel_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel_exp[7] = sel_expected_prev[7];
	end
	if (
		( start1_expected_prev !== 1'bx ) && ( start1_prev !== start1_expected_prev )
		&& ((start1_expected_prev !== last_start1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start1_expected_prev);
		$display ("     Real value = %b", start1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_start1_exp = start1_expected_prev;
	end
	if (
		( start2_expected_prev !== 1'bx ) && ( start2_prev !== start2_expected_prev )
		&& ((start2_expected_prev !== last_start2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start2_expected_prev);
		$display ("     Real value = %b", start2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_start2_exp = start2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TOP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk24M;
reg [2:0] key;
// wires                                               
wire ale1;
wire ale2;
wire [7:0] dout;
wire oe1;
wire oe2;
wire [17:0] s_shizaigonglv;
wire [7:0] sel;
wire start1;
wire start2;

wire sampler;                             

// assign statements (if any)                          
TOP i1 (
// port map - connection between master ports and signals/registers   
	.ale1(ale1),
	.ale2(ale2),
	.clk24M(clk24M),
	.dout(dout),
	.key(key),
	.oe1(oe1),
	.oe2(oe2),
	.s_shizaigonglv(s_shizaigonglv),
	.sel(sel),
	.start1(start1),
	.start2(start2)
);

// clk24M
always
begin
	clk24M = 1'b0;
	clk24M = #500 1'b1;
	#500;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 

TOP_vlg_sample_tst tb_sample (
	.clk24M(clk24M),
	.key(key),
	.sampler_tx(sampler)
);

TOP_vlg_check_tst tb_out(
	.ale1(ale1),
	.ale2(ale2),
	.dout(dout),
	.oe1(oe1),
	.oe2(oe2),
	.s_shizaigonglv(s_shizaigonglv),
	.sel(sel),
	.start1(start1),
	.start2(start2),
	.sampler_rx(sampler)
);
endmodule

