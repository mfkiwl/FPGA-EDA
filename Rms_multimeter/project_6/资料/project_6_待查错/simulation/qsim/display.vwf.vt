// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2023 16:42:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    display
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module display_vlg_sample_tst(
	clk256,
	din0,
	din1,
	din2,
	din3,
	din4,
	din5,
	din6,
	din7,
	sampler_tx
);
input  clk256;
input [7:0] din0;
input [7:0] din1;
input [7:0] din2;
input [7:0] din3;
input [7:0] din4;
input [7:0] din5;
input [7:0] din6;
input [7:0] din7;
output sampler_tx;

reg sample;
time current_time;
always @(clk256 or din0 or din1 or din2 or din3 or din4 or din5 or din6 or din7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module display_vlg_check_tst (
	dout,
	sel,
	sampler_rx
);
input [7:0] dout;
input [7:0] sel;
input sampler_rx;

reg [7:0] dout_expected;
reg [7:0] sel_expected;

reg [7:0] dout_prev;
reg [7:0] sel_prev;

reg [7:0] dout_expected_prev;
reg [7:0] sel_expected_prev;

reg [7:0] last_dout_exp;
reg [7:0] last_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout_prev = dout;
	sel_prev = sel;
end

// update expected /o prevs

always @(trigger)
begin
	dout_expected_prev = dout_expected;
	sel_expected_prev = sel_expected;
end


// expected dout[ 7 ]
initial
begin
	dout_expected[7] = 1'bX;
end 
// expected dout[ 6 ]
initial
begin
	dout_expected[6] = 1'bX;
end 
// expected dout[ 5 ]
initial
begin
	dout_expected[5] = 1'bX;
end 
// expected dout[ 4 ]
initial
begin
	dout_expected[4] = 1'bX;
end 
// expected dout[ 3 ]
initial
begin
	dout_expected[3] = 1'bX;
end 
// expected dout[ 2 ]
initial
begin
	dout_expected[2] = 1'bX;
end 
// expected dout[ 1 ]
initial
begin
	dout_expected[1] = 1'bX;
end 
// expected dout[ 0 ]
initial
begin
	dout_expected[0] = 1'bX;
end 
// expected sel[ 7 ]
initial
begin
	sel_expected[7] = 1'bX;
end 
// expected sel[ 6 ]
initial
begin
	sel_expected[6] = 1'bX;
end 
// expected sel[ 5 ]
initial
begin
	sel_expected[5] = 1'bX;
end 
// expected sel[ 4 ]
initial
begin
	sel_expected[4] = 1'bX;
end 
// expected sel[ 3 ]
initial
begin
	sel_expected[3] = 1'bX;
end 
// expected sel[ 2 ]
initial
begin
	sel_expected[2] = 1'bX;
end 
// expected sel[ 1 ]
initial
begin
	sel_expected[1] = 1'bX;
end 
// expected sel[ 0 ]
initial
begin
	sel_expected[0] = 1'bX;
end 
// generate trigger
always @(dout_expected or dout or sel_expected or sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout = %b | expected sel = %b | ",dout_expected_prev,sel_expected_prev);
	$display("| real dout = %b | real sel = %b | ",dout_prev,sel_prev);
`endif
	if (
		( dout_expected_prev[0] !== 1'bx ) && ( dout_prev[0] !== dout_expected_prev[0] )
		&& ((dout_expected_prev[0] !== last_dout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[0] = dout_expected_prev[0];
	end
	if (
		( dout_expected_prev[1] !== 1'bx ) && ( dout_prev[1] !== dout_expected_prev[1] )
		&& ((dout_expected_prev[1] !== last_dout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[1] = dout_expected_prev[1];
	end
	if (
		( dout_expected_prev[2] !== 1'bx ) && ( dout_prev[2] !== dout_expected_prev[2] )
		&& ((dout_expected_prev[2] !== last_dout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[2] = dout_expected_prev[2];
	end
	if (
		( dout_expected_prev[3] !== 1'bx ) && ( dout_prev[3] !== dout_expected_prev[3] )
		&& ((dout_expected_prev[3] !== last_dout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[3] = dout_expected_prev[3];
	end
	if (
		( dout_expected_prev[4] !== 1'bx ) && ( dout_prev[4] !== dout_expected_prev[4] )
		&& ((dout_expected_prev[4] !== last_dout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[4] = dout_expected_prev[4];
	end
	if (
		( dout_expected_prev[5] !== 1'bx ) && ( dout_prev[5] !== dout_expected_prev[5] )
		&& ((dout_expected_prev[5] !== last_dout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[5] = dout_expected_prev[5];
	end
	if (
		( dout_expected_prev[6] !== 1'bx ) && ( dout_prev[6] !== dout_expected_prev[6] )
		&& ((dout_expected_prev[6] !== last_dout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[6] = dout_expected_prev[6];
	end
	if (
		( dout_expected_prev[7] !== 1'bx ) && ( dout_prev[7] !== dout_expected_prev[7] )
		&& ((dout_expected_prev[7] !== last_dout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp[7] = dout_expected_prev[7];
	end
	if (
		( sel_expected_prev[0] !== 1'bx ) && ( sel_prev[0] !== sel_expected_prev[0] )
		&& ((sel_expected_prev[0] !== last_sel_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[0] = sel_expected_prev[0];
	end
	if (
		( sel_expected_prev[1] !== 1'bx ) && ( sel_prev[1] !== sel_expected_prev[1] )
		&& ((sel_expected_prev[1] !== last_sel_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[1] = sel_expected_prev[1];
	end
	if (
		( sel_expected_prev[2] !== 1'bx ) && ( sel_prev[2] !== sel_expected_prev[2] )
		&& ((sel_expected_prev[2] !== last_sel_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[2] = sel_expected_prev[2];
	end
	if (
		( sel_expected_prev[3] !== 1'bx ) && ( sel_prev[3] !== sel_expected_prev[3] )
		&& ((sel_expected_prev[3] !== last_sel_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[3] = sel_expected_prev[3];
	end
	if (
		( sel_expected_prev[4] !== 1'bx ) && ( sel_prev[4] !== sel_expected_prev[4] )
		&& ((sel_expected_prev[4] !== last_sel_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[4] = sel_expected_prev[4];
	end
	if (
		( sel_expected_prev[5] !== 1'bx ) && ( sel_prev[5] !== sel_expected_prev[5] )
		&& ((sel_expected_prev[5] !== last_sel_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[5] = sel_expected_prev[5];
	end
	if (
		( sel_expected_prev[6] !== 1'bx ) && ( sel_prev[6] !== sel_expected_prev[6] )
		&& ((sel_expected_prev[6] !== last_sel_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[6] = sel_expected_prev[6];
	end
	if (
		( sel_expected_prev[7] !== 1'bx ) && ( sel_prev[7] !== sel_expected_prev[7] )
		&& ((sel_expected_prev[7] !== last_sel_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[7] = sel_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module display_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk256;
reg [7:0] din0;
reg [7:0] din1;
reg [7:0] din2;
reg [7:0] din3;
reg [7:0] din4;
reg [7:0] din5;
reg [7:0] din6;
reg [7:0] din7;
// wires                                               
wire [7:0] dout;
wire [7:0] sel;

wire sampler;                             

// assign statements (if any)                          
display i1 (
// port map - connection between master ports and signals/registers   
	.clk256(clk256),
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.din5(din5),
	.din6(din6),
	.din7(din7),
	.dout(dout),
	.sel(sel)
);

// clk256
initial
begin
	repeat(33)
	begin
		clk256 = 1'b0;
		clk256 = #15000 1'b1;
		# 15000;
	end
	clk256 = 1'b0;
end 
// din0[ 7 ]
initial
begin
	din0[7] = 1'b0;
end 
// din0[ 6 ]
initial
begin
	din0[6] = 1'b0;
end 
// din0[ 5 ]
initial
begin
	din0[5] = 1'b0;
end 
// din0[ 4 ]
initial
begin
	din0[4] = 1'b0;
end 
// din0[ 3 ]
initial
begin
	din0[3] = 1'b0;
end 
// din0[ 2 ]
initial
begin
	din0[2] = 1'b0;
end 
// din0[ 1 ]
initial
begin
	din0[1] = 1'b0;
end 
// din0[ 0 ]
initial
begin
	din0[0] = 1'b0;
end 
// din1[ 7 ]
initial
begin
	din1[7] = 1'b0;
end 
// din1[ 6 ]
initial
begin
	din1[6] = 1'b0;
end 
// din1[ 5 ]
initial
begin
	din1[5] = 1'b0;
end 
// din1[ 4 ]
initial
begin
	din1[4] = 1'b0;
end 
// din1[ 3 ]
initial
begin
	din1[3] = 1'b0;
end 
// din1[ 2 ]
initial
begin
	din1[2] = 1'b0;
end 
// din1[ 1 ]
initial
begin
	din1[1] = 1'b0;
end 
// din1[ 0 ]
initial
begin
	din1[0] = 1'b1;
end 
// din2[ 7 ]
initial
begin
	din2[7] = 1'b0;
end 
// din2[ 6 ]
initial
begin
	din2[6] = 1'b0;
end 
// din2[ 5 ]
initial
begin
	din2[5] = 1'b0;
end 
// din2[ 4 ]
initial
begin
	din2[4] = 1'b0;
end 
// din2[ 3 ]
initial
begin
	din2[3] = 1'b0;
end 
// din2[ 2 ]
initial
begin
	din2[2] = 1'b0;
end 
// din2[ 1 ]
initial
begin
	din2[1] = 1'b1;
end 
// din2[ 0 ]
initial
begin
	din2[0] = 1'b0;
end 
// din3[ 7 ]
initial
begin
	din3[7] = 1'b0;
end 
// din3[ 6 ]
initial
begin
	din3[6] = 1'b0;
end 
// din3[ 5 ]
initial
begin
	din3[5] = 1'b0;
end 
// din3[ 4 ]
initial
begin
	din3[4] = 1'b0;
end 
// din3[ 3 ]
initial
begin
	din3[3] = 1'b0;
end 
// din3[ 2 ]
initial
begin
	din3[2] = 1'b0;
end 
// din3[ 1 ]
initial
begin
	din3[1] = 1'b1;
end 
// din3[ 0 ]
initial
begin
	din3[0] = 1'b1;
end 
// din4[ 7 ]
initial
begin
	din4[7] = 1'b0;
end 
// din4[ 6 ]
initial
begin
	din4[6] = 1'b0;
end 
// din4[ 5 ]
initial
begin
	din4[5] = 1'b0;
end 
// din4[ 4 ]
initial
begin
	din4[4] = 1'b0;
end 
// din4[ 3 ]
initial
begin
	din4[3] = 1'b0;
end 
// din4[ 2 ]
initial
begin
	din4[2] = 1'b1;
end 
// din4[ 1 ]
initial
begin
	din4[1] = 1'b0;
end 
// din4[ 0 ]
initial
begin
	din4[0] = 1'b0;
end 
// din5[ 7 ]
initial
begin
	din5[7] = 1'b0;
end 
// din5[ 6 ]
initial
begin
	din5[6] = 1'b0;
end 
// din5[ 5 ]
initial
begin
	din5[5] = 1'b0;
end 
// din5[ 4 ]
initial
begin
	din5[4] = 1'b0;
end 
// din5[ 3 ]
initial
begin
	din5[3] = 1'b0;
end 
// din5[ 2 ]
initial
begin
	din5[2] = 1'b1;
end 
// din5[ 1 ]
initial
begin
	din5[1] = 1'b0;
end 
// din5[ 0 ]
initial
begin
	din5[0] = 1'b1;
end 
// din6[ 7 ]
initial
begin
	din6[7] = 1'b0;
end 
// din6[ 6 ]
initial
begin
	din6[6] = 1'b0;
end 
// din6[ 5 ]
initial
begin
	din6[5] = 1'b0;
end 
// din6[ 4 ]
initial
begin
	din6[4] = 1'b0;
end 
// din6[ 3 ]
initial
begin
	din6[3] = 1'b0;
end 
// din6[ 2 ]
initial
begin
	din6[2] = 1'b1;
end 
// din6[ 1 ]
initial
begin
	din6[1] = 1'b1;
end 
// din6[ 0 ]
initial
begin
	din6[0] = 1'b0;
end 
// din7[ 7 ]
initial
begin
	din7[7] = 1'b0;
end 
// din7[ 6 ]
initial
begin
	din7[6] = 1'b0;
end 
// din7[ 5 ]
initial
begin
	din7[5] = 1'b0;
end 
// din7[ 4 ]
initial
begin
	din7[4] = 1'b0;
end 
// din7[ 3 ]
initial
begin
	din7[3] = 1'b0;
end 
// din7[ 2 ]
initial
begin
	din7[2] = 1'b1;
end 
// din7[ 1 ]
initial
begin
	din7[1] = 1'b1;
end 
// din7[ 0 ]
initial
begin
	din7[0] = 1'b1;
end 

display_vlg_sample_tst tb_sample (
	.clk256(clk256),
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.din5(din5),
	.din6(din6),
	.din7(din7),
	.sampler_tx(sampler)
);

display_vlg_check_tst tb_out(
	.dout(dout),
	.sel(sel),
	.sampler_rx(sampler)
);
endmodule

