// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2023 12:54:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    XSKZ
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module XSKZ_vlg_sample_tst(
	clk24M,
	din7,
	kk,
	ru,
	sampler_tx
);
input  clk24M;
input [4:0] din7;
input [2:0] kk;
input [15:0] ru;
output sampler_tx;

reg sample;
time current_time;
always @(clk24M or din7 or kk or ru)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module XSKZ_vlg_check_tst (
	dout7,
	sel,
	sampler_rx
);
input [7:0] dout7;
input [7:0] sel;
input sampler_rx;

reg [7:0] dout7_expected;
reg [7:0] sel_expected;

reg [7:0] dout7_prev;
reg [7:0] sel_prev;

reg [7:0] dout7_expected_prev;
reg [7:0] sel_expected_prev;

reg [7:0] last_dout7_exp;
reg [7:0] last_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout7_prev = dout7;
	sel_prev = sel;
end

// update expected /o prevs

always @(trigger)
begin
	dout7_expected_prev = dout7_expected;
	sel_expected_prev = sel_expected;
end


// expected dout7[ 7 ]
initial
begin
	dout7_expected[7] = 1'bX;
end 
// expected dout7[ 6 ]
initial
begin
	dout7_expected[6] = 1'bX;
end 
// expected dout7[ 5 ]
initial
begin
	dout7_expected[5] = 1'bX;
end 
// expected dout7[ 4 ]
initial
begin
	dout7_expected[4] = 1'bX;
end 
// expected dout7[ 3 ]
initial
begin
	dout7_expected[3] = 1'bX;
end 
// expected dout7[ 2 ]
initial
begin
	dout7_expected[2] = 1'bX;
end 
// expected dout7[ 1 ]
initial
begin
	dout7_expected[1] = 1'bX;
end 
// expected dout7[ 0 ]
initial
begin
	dout7_expected[0] = 1'bX;
end 
// expected sel[ 7 ]
initial
begin
	sel_expected[7] = 1'bX;
end 
// expected sel[ 6 ]
initial
begin
	sel_expected[6] = 1'bX;
end 
// expected sel[ 5 ]
initial
begin
	sel_expected[5] = 1'bX;
end 
// expected sel[ 4 ]
initial
begin
	sel_expected[4] = 1'bX;
end 
// expected sel[ 3 ]
initial
begin
	sel_expected[3] = 1'bX;
end 
// expected sel[ 2 ]
initial
begin
	sel_expected[2] = 1'bX;
end 
// expected sel[ 1 ]
initial
begin
	sel_expected[1] = 1'bX;
end 
// expected sel[ 0 ]
initial
begin
	sel_expected[0] = 1'bX;
end 
// generate trigger
always @(dout7_expected or dout7 or sel_expected or sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout7 = %b | expected sel = %b | ",dout7_expected_prev,sel_expected_prev);
	$display("| real dout7 = %b | real sel = %b | ",dout7_prev,sel_prev);
`endif
	if (
		( dout7_expected_prev[0] !== 1'bx ) && ( dout7_prev[0] !== dout7_expected_prev[0] )
		&& ((dout7_expected_prev[0] !== last_dout7_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[0] = dout7_expected_prev[0];
	end
	if (
		( dout7_expected_prev[1] !== 1'bx ) && ( dout7_prev[1] !== dout7_expected_prev[1] )
		&& ((dout7_expected_prev[1] !== last_dout7_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[1] = dout7_expected_prev[1];
	end
	if (
		( dout7_expected_prev[2] !== 1'bx ) && ( dout7_prev[2] !== dout7_expected_prev[2] )
		&& ((dout7_expected_prev[2] !== last_dout7_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[2] = dout7_expected_prev[2];
	end
	if (
		( dout7_expected_prev[3] !== 1'bx ) && ( dout7_prev[3] !== dout7_expected_prev[3] )
		&& ((dout7_expected_prev[3] !== last_dout7_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[3] = dout7_expected_prev[3];
	end
	if (
		( dout7_expected_prev[4] !== 1'bx ) && ( dout7_prev[4] !== dout7_expected_prev[4] )
		&& ((dout7_expected_prev[4] !== last_dout7_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[4] = dout7_expected_prev[4];
	end
	if (
		( dout7_expected_prev[5] !== 1'bx ) && ( dout7_prev[5] !== dout7_expected_prev[5] )
		&& ((dout7_expected_prev[5] !== last_dout7_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[5] = dout7_expected_prev[5];
	end
	if (
		( dout7_expected_prev[6] !== 1'bx ) && ( dout7_prev[6] !== dout7_expected_prev[6] )
		&& ((dout7_expected_prev[6] !== last_dout7_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[6] = dout7_expected_prev[6];
	end
	if (
		( dout7_expected_prev[7] !== 1'bx ) && ( dout7_prev[7] !== dout7_expected_prev[7] )
		&& ((dout7_expected_prev[7] !== last_dout7_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout7_expected_prev);
		$display ("     Real value = %b", dout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout7_exp[7] = dout7_expected_prev[7];
	end
	if (
		( sel_expected_prev[0] !== 1'bx ) && ( sel_prev[0] !== sel_expected_prev[0] )
		&& ((sel_expected_prev[0] !== last_sel_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[0] = sel_expected_prev[0];
	end
	if (
		( sel_expected_prev[1] !== 1'bx ) && ( sel_prev[1] !== sel_expected_prev[1] )
		&& ((sel_expected_prev[1] !== last_sel_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[1] = sel_expected_prev[1];
	end
	if (
		( sel_expected_prev[2] !== 1'bx ) && ( sel_prev[2] !== sel_expected_prev[2] )
		&& ((sel_expected_prev[2] !== last_sel_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[2] = sel_expected_prev[2];
	end
	if (
		( sel_expected_prev[3] !== 1'bx ) && ( sel_prev[3] !== sel_expected_prev[3] )
		&& ((sel_expected_prev[3] !== last_sel_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[3] = sel_expected_prev[3];
	end
	if (
		( sel_expected_prev[4] !== 1'bx ) && ( sel_prev[4] !== sel_expected_prev[4] )
		&& ((sel_expected_prev[4] !== last_sel_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[4] = sel_expected_prev[4];
	end
	if (
		( sel_expected_prev[5] !== 1'bx ) && ( sel_prev[5] !== sel_expected_prev[5] )
		&& ((sel_expected_prev[5] !== last_sel_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[5] = sel_expected_prev[5];
	end
	if (
		( sel_expected_prev[6] !== 1'bx ) && ( sel_prev[6] !== sel_expected_prev[6] )
		&& ((sel_expected_prev[6] !== last_sel_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[6] = sel_expected_prev[6];
	end
	if (
		( sel_expected_prev[7] !== 1'bx ) && ( sel_prev[7] !== sel_expected_prev[7] )
		&& ((sel_expected_prev[7] !== last_sel_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_exp[7] = sel_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module XSKZ_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk24M;
reg [4:0] din7;
reg [2:0] kk;
reg [15:0] ru;
// wires                                               
wire [7:0] dout7;
wire [7:0] sel;

wire sampler;                             

// assign statements (if any)                          
XSKZ i1 (
// port map - connection between master ports and signals/registers   
	.clk24M(clk24M),
	.din7(din7),
	.dout7(dout7),
	.kk(kk),
	.ru(ru),
	.sel(sel)
);

// clk24M
always
begin
	clk24M = 1'b0;
	clk24M = #5000 1'b1;
	#5000;
end 
// din7[ 4 ]
initial
begin
	din7[4] = 1'b0;
end 
// din7[ 3 ]
initial
begin
	din7[3] = 1'b0;
end 
// din7[ 2 ]
initial
begin
	din7[2] = 1'b0;
end 
// din7[ 1 ]
initial
begin
	din7[1] = 1'b0;
end 
// din7[ 0 ]
initial
begin
	din7[0] = 1'b1;
end 
// kk[ 2 ]
initial
begin
	kk[2] = 1'b0;
end 
// kk[ 1 ]
initial
begin
	kk[1] = 1'b0;
end 
// kk[ 0 ]
initial
begin
	kk[0] = 1'b1;
end 
// ru[ 15 ]
initial
begin
	ru[15] = 1'b0;
end 
// ru[ 14 ]
initial
begin
	ru[14] = 1'b0;
end 
// ru[ 13 ]
initial
begin
	ru[13] = 1'b0;
end 
// ru[ 12 ]
initial
begin
	ru[12] = 1'b0;
end 
// ru[ 11 ]
initial
begin
	ru[11] = 1'b0;
end 
// ru[ 10 ]
initial
begin
	ru[10] = 1'b0;
end 
// ru[ 9 ]
initial
begin
	ru[9] = 1'b0;
end 
// ru[ 8 ]
initial
begin
	ru[8] = 1'b0;
end 
// ru[ 7 ]
initial
begin
	ru[7] = 1'b0;
end 
// ru[ 6 ]
initial
begin
	ru[6] = 1'b0;
end 
// ru[ 5 ]
initial
begin
	ru[5] = 1'b0;
end 
// ru[ 4 ]
initial
begin
	ru[4] = 1'b0;
end 
// ru[ 3 ]
initial
begin
	ru[3] = 1'b1;
end 
// ru[ 2 ]
initial
begin
	ru[2] = 1'b0;
end 
// ru[ 1 ]
initial
begin
	ru[1] = 1'b0;
end 
// ru[ 0 ]
initial
begin
	ru[0] = 1'b0;
end 

XSKZ_vlg_sample_tst tb_sample (
	.clk24M(clk24M),
	.din7(din7),
	.kk(kk),
	.ru(ru),
	.sampler_tx(sampler)
);

XSKZ_vlg_check_tst tb_out(
	.dout7(dout7),
	.sel(sel),
	.sampler_rx(sampler)
);
endmodule

