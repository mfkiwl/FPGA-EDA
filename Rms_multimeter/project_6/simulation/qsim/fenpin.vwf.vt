// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2023 15:28:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fenpin
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fenpin_vlg_sample_tst(
	clk_24M,
	sampler_tx
);
input  clk_24M;
output sampler_tx;

reg sample;
time current_time;
always @(clk_24M)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fenpin_vlg_check_tst (
	new_clk_8K,
	new_clk_24M,
	new_clk_80k,
	sampler_rx
);
input  new_clk_8K;
input  new_clk_24M;
input  new_clk_80k;
input sampler_rx;

reg  new_clk_8K_expected;
reg  new_clk_24M_expected;
reg  new_clk_80k_expected;

reg  new_clk_8K_prev;
reg  new_clk_24M_prev;
reg  new_clk_80k_prev;

reg  new_clk_8K_expected_prev;
reg  new_clk_24M_expected_prev;
reg  new_clk_80k_expected_prev;

reg  last_new_clk_8K_exp;
reg  last_new_clk_24M_exp;
reg  last_new_clk_80k_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	new_clk_8K_prev = new_clk_8K;
	new_clk_24M_prev = new_clk_24M;
	new_clk_80k_prev = new_clk_80k;
end

// update expected /o prevs

always @(trigger)
begin
	new_clk_8K_expected_prev = new_clk_8K_expected;
	new_clk_24M_expected_prev = new_clk_24M_expected;
	new_clk_80k_expected_prev = new_clk_80k_expected;
end



// expected new_clk_8K
initial
begin
	new_clk_8K_expected = 1'bX;
end 

// expected new_clk_24M
initial
begin
	new_clk_24M_expected = 1'bX;
end 

// expected new_clk_80k
initial
begin
	new_clk_80k_expected = 1'bX;
end 
// generate trigger
always @(new_clk_8K_expected or new_clk_8K or new_clk_24M_expected or new_clk_24M or new_clk_80k_expected or new_clk_80k)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected new_clk_8K = %b | expected new_clk_24M = %b | expected new_clk_80k = %b | ",new_clk_8K_expected_prev,new_clk_24M_expected_prev,new_clk_80k_expected_prev);
	$display("| real new_clk_8K = %b | real new_clk_24M = %b | real new_clk_80k = %b | ",new_clk_8K_prev,new_clk_24M_prev,new_clk_80k_prev);
`endif
	if (
		( new_clk_8K_expected_prev !== 1'bx ) && ( new_clk_8K_prev !== new_clk_8K_expected_prev )
		&& ((new_clk_8K_expected_prev !== last_new_clk_8K_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_clk_8K :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_clk_8K_expected_prev);
		$display ("     Real value = %b", new_clk_8K_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_new_clk_8K_exp = new_clk_8K_expected_prev;
	end
	if (
		( new_clk_24M_expected_prev !== 1'bx ) && ( new_clk_24M_prev !== new_clk_24M_expected_prev )
		&& ((new_clk_24M_expected_prev !== last_new_clk_24M_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_clk_24M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_clk_24M_expected_prev);
		$display ("     Real value = %b", new_clk_24M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_clk_24M_exp = new_clk_24M_expected_prev;
	end
	if (
		( new_clk_80k_expected_prev !== 1'bx ) && ( new_clk_80k_prev !== new_clk_80k_expected_prev )
		&& ((new_clk_80k_expected_prev !== last_new_clk_80k_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_clk_80k :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_clk_80k_expected_prev);
		$display ("     Real value = %b", new_clk_80k_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_new_clk_80k_exp = new_clk_80k_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fenpin_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_24M;
// wires                                               
wire new_clk_8K;
wire new_clk_24M;
wire new_clk_80k;

wire sampler;                             

// assign statements (if any)                          
fenpin i1 (
// port map - connection between master ports and signals/registers   
	.clk_24M(clk_24M),
	.new_clk_8K(new_clk_8K),
	.new_clk_24M(new_clk_24M),
	.new_clk_80k(new_clk_80k)
);

// clk_24M
always
begin
	clk_24M = 1'b0;
	clk_24M = #5000 1'b1;
	#5000;
end 

fenpin_vlg_sample_tst tb_sample (
	.clk_24M(clk_24M),
	.sampler_tx(sampler)
);

fenpin_vlg_check_tst tb_out(
	.new_clk_8K(new_clk_8K),
	.new_clk_24M(new_clk_24M),
	.new_clk_80k(new_clk_80k),
	.sampler_rx(sampler)
);
endmodule

