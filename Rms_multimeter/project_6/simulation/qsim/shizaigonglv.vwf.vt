// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2023 09:09:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    shizaigonglv
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shizaigonglv_vlg_sample_tst(
	clk,
	i_youxiaozhi,
	u_youxiaozhi,
	sampler_tx
);
input  clk;
input [13:0] i_youxiaozhi;
input [13:0] u_youxiaozhi;
output sampler_tx;

reg sample;
time current_time;
always @(clk or i_youxiaozhi or u_youxiaozhi)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module shizaigonglv_vlg_check_tst (
	shizaigonglv,
	sampler_rx
);
input [17:0] shizaigonglv;
input sampler_rx;

reg [17:0] shizaigonglv_expected;

reg [17:0] shizaigonglv_prev;

reg [17:0] shizaigonglv_expected_prev;

reg [17:0] last_shizaigonglv_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	shizaigonglv_prev = shizaigonglv;
end

// update expected /o prevs

always @(trigger)
begin
	shizaigonglv_expected_prev = shizaigonglv_expected;
end


// expected shizaigonglv[ 17 ]
initial
begin
	shizaigonglv_expected[17] = 1'bX;
end 
// expected shizaigonglv[ 16 ]
initial
begin
	shizaigonglv_expected[16] = 1'bX;
end 
// expected shizaigonglv[ 15 ]
initial
begin
	shizaigonglv_expected[15] = 1'bX;
end 
// expected shizaigonglv[ 14 ]
initial
begin
	shizaigonglv_expected[14] = 1'bX;
end 
// expected shizaigonglv[ 13 ]
initial
begin
	shizaigonglv_expected[13] = 1'bX;
end 
// expected shizaigonglv[ 12 ]
initial
begin
	shizaigonglv_expected[12] = 1'bX;
end 
// expected shizaigonglv[ 11 ]
initial
begin
	shizaigonglv_expected[11] = 1'bX;
end 
// expected shizaigonglv[ 10 ]
initial
begin
	shizaigonglv_expected[10] = 1'bX;
end 
// expected shizaigonglv[ 9 ]
initial
begin
	shizaigonglv_expected[9] = 1'bX;
end 
// expected shizaigonglv[ 8 ]
initial
begin
	shizaigonglv_expected[8] = 1'bX;
end 
// expected shizaigonglv[ 7 ]
initial
begin
	shizaigonglv_expected[7] = 1'bX;
end 
// expected shizaigonglv[ 6 ]
initial
begin
	shizaigonglv_expected[6] = 1'bX;
end 
// expected shizaigonglv[ 5 ]
initial
begin
	shizaigonglv_expected[5] = 1'bX;
end 
// expected shizaigonglv[ 4 ]
initial
begin
	shizaigonglv_expected[4] = 1'bX;
end 
// expected shizaigonglv[ 3 ]
initial
begin
	shizaigonglv_expected[3] = 1'bX;
end 
// expected shizaigonglv[ 2 ]
initial
begin
	shizaigonglv_expected[2] = 1'bX;
end 
// expected shizaigonglv[ 1 ]
initial
begin
	shizaigonglv_expected[1] = 1'bX;
end 
// expected shizaigonglv[ 0 ]
initial
begin
	shizaigonglv_expected[0] = 1'bX;
end 
// generate trigger
always @(shizaigonglv_expected or shizaigonglv)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected shizaigonglv = %b | ",shizaigonglv_expected_prev);
	$display("| real shizaigonglv = %b | ",shizaigonglv_prev);
`endif
	if (
		( shizaigonglv_expected_prev[0] !== 1'bx ) && ( shizaigonglv_prev[0] !== shizaigonglv_expected_prev[0] )
		&& ((shizaigonglv_expected_prev[0] !== last_shizaigonglv_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[0] = shizaigonglv_expected_prev[0];
	end
	if (
		( shizaigonglv_expected_prev[1] !== 1'bx ) && ( shizaigonglv_prev[1] !== shizaigonglv_expected_prev[1] )
		&& ((shizaigonglv_expected_prev[1] !== last_shizaigonglv_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[1] = shizaigonglv_expected_prev[1];
	end
	if (
		( shizaigonglv_expected_prev[2] !== 1'bx ) && ( shizaigonglv_prev[2] !== shizaigonglv_expected_prev[2] )
		&& ((shizaigonglv_expected_prev[2] !== last_shizaigonglv_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[2] = shizaigonglv_expected_prev[2];
	end
	if (
		( shizaigonglv_expected_prev[3] !== 1'bx ) && ( shizaigonglv_prev[3] !== shizaigonglv_expected_prev[3] )
		&& ((shizaigonglv_expected_prev[3] !== last_shizaigonglv_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[3] = shizaigonglv_expected_prev[3];
	end
	if (
		( shizaigonglv_expected_prev[4] !== 1'bx ) && ( shizaigonglv_prev[4] !== shizaigonglv_expected_prev[4] )
		&& ((shizaigonglv_expected_prev[4] !== last_shizaigonglv_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[4] = shizaigonglv_expected_prev[4];
	end
	if (
		( shizaigonglv_expected_prev[5] !== 1'bx ) && ( shizaigonglv_prev[5] !== shizaigonglv_expected_prev[5] )
		&& ((shizaigonglv_expected_prev[5] !== last_shizaigonglv_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[5] = shizaigonglv_expected_prev[5];
	end
	if (
		( shizaigonglv_expected_prev[6] !== 1'bx ) && ( shizaigonglv_prev[6] !== shizaigonglv_expected_prev[6] )
		&& ((shizaigonglv_expected_prev[6] !== last_shizaigonglv_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[6] = shizaigonglv_expected_prev[6];
	end
	if (
		( shizaigonglv_expected_prev[7] !== 1'bx ) && ( shizaigonglv_prev[7] !== shizaigonglv_expected_prev[7] )
		&& ((shizaigonglv_expected_prev[7] !== last_shizaigonglv_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[7] = shizaigonglv_expected_prev[7];
	end
	if (
		( shizaigonglv_expected_prev[8] !== 1'bx ) && ( shizaigonglv_prev[8] !== shizaigonglv_expected_prev[8] )
		&& ((shizaigonglv_expected_prev[8] !== last_shizaigonglv_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[8] = shizaigonglv_expected_prev[8];
	end
	if (
		( shizaigonglv_expected_prev[9] !== 1'bx ) && ( shizaigonglv_prev[9] !== shizaigonglv_expected_prev[9] )
		&& ((shizaigonglv_expected_prev[9] !== last_shizaigonglv_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[9] = shizaigonglv_expected_prev[9];
	end
	if (
		( shizaigonglv_expected_prev[10] !== 1'bx ) && ( shizaigonglv_prev[10] !== shizaigonglv_expected_prev[10] )
		&& ((shizaigonglv_expected_prev[10] !== last_shizaigonglv_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[10] = shizaigonglv_expected_prev[10];
	end
	if (
		( shizaigonglv_expected_prev[11] !== 1'bx ) && ( shizaigonglv_prev[11] !== shizaigonglv_expected_prev[11] )
		&& ((shizaigonglv_expected_prev[11] !== last_shizaigonglv_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[11] = shizaigonglv_expected_prev[11];
	end
	if (
		( shizaigonglv_expected_prev[12] !== 1'bx ) && ( shizaigonglv_prev[12] !== shizaigonglv_expected_prev[12] )
		&& ((shizaigonglv_expected_prev[12] !== last_shizaigonglv_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[12] = shizaigonglv_expected_prev[12];
	end
	if (
		( shizaigonglv_expected_prev[13] !== 1'bx ) && ( shizaigonglv_prev[13] !== shizaigonglv_expected_prev[13] )
		&& ((shizaigonglv_expected_prev[13] !== last_shizaigonglv_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[13] = shizaigonglv_expected_prev[13];
	end
	if (
		( shizaigonglv_expected_prev[14] !== 1'bx ) && ( shizaigonglv_prev[14] !== shizaigonglv_expected_prev[14] )
		&& ((shizaigonglv_expected_prev[14] !== last_shizaigonglv_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[14] = shizaigonglv_expected_prev[14];
	end
	if (
		( shizaigonglv_expected_prev[15] !== 1'bx ) && ( shizaigonglv_prev[15] !== shizaigonglv_expected_prev[15] )
		&& ((shizaigonglv_expected_prev[15] !== last_shizaigonglv_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[15] = shizaigonglv_expected_prev[15];
	end
	if (
		( shizaigonglv_expected_prev[16] !== 1'bx ) && ( shizaigonglv_prev[16] !== shizaigonglv_expected_prev[16] )
		&& ((shizaigonglv_expected_prev[16] !== last_shizaigonglv_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[16] = shizaigonglv_expected_prev[16];
	end
	if (
		( shizaigonglv_expected_prev[17] !== 1'bx ) && ( shizaigonglv_prev[17] !== shizaigonglv_expected_prev[17] )
		&& ((shizaigonglv_expected_prev[17] !== last_shizaigonglv_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shizaigonglv[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shizaigonglv_expected_prev);
		$display ("     Real value = %b", shizaigonglv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_shizaigonglv_exp[17] = shizaigonglv_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module shizaigonglv_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [13:0] i_youxiaozhi;
reg [13:0] u_youxiaozhi;
// wires                                               
wire [17:0] shizaigonglv;

wire sampler;                             

// assign statements (if any)                          
shizaigonglv i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.i_youxiaozhi(i_youxiaozhi),
	.shizaigonglv(shizaigonglv),
	.u_youxiaozhi(u_youxiaozhi)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// i_youxiaozhi[ 13 ]
initial
begin
	i_youxiaozhi[13] = 1'b0;
end 
// i_youxiaozhi[ 12 ]
initial
begin
	i_youxiaozhi[12] = 1'b0;
end 
// i_youxiaozhi[ 11 ]
initial
begin
	i_youxiaozhi[11] = 1'b0;
end 
// i_youxiaozhi[ 10 ]
initial
begin
	i_youxiaozhi[10] = 1'b0;
end 
// i_youxiaozhi[ 9 ]
initial
begin
	i_youxiaozhi[9] = 1'b0;
end 
// i_youxiaozhi[ 8 ]
initial
begin
	i_youxiaozhi[8] = 1'b0;
end 
// i_youxiaozhi[ 7 ]
initial
begin
	i_youxiaozhi[7] = 1'b0;
end 
// i_youxiaozhi[ 6 ]
initial
begin
	i_youxiaozhi[6] = 1'b0;
end 
// i_youxiaozhi[ 5 ]
initial
begin
	i_youxiaozhi[5] = 1'b0;
end 
// i_youxiaozhi[ 4 ]
initial
begin
	i_youxiaozhi[4] = 1'b0;
end 
// i_youxiaozhi[ 3 ]
initial
begin
	i_youxiaozhi[3] = 1'b1;
end 
// i_youxiaozhi[ 2 ]
initial
begin
	i_youxiaozhi[2] = 1'b0;
end 
// i_youxiaozhi[ 1 ]
initial
begin
	i_youxiaozhi[1] = 1'b1;
end 
// i_youxiaozhi[ 0 ]
initial
begin
	i_youxiaozhi[0] = 1'b0;
end 
// u_youxiaozhi[ 13 ]
initial
begin
	u_youxiaozhi[13] = 1'b0;
end 
// u_youxiaozhi[ 12 ]
initial
begin
	u_youxiaozhi[12] = 1'b0;
end 
// u_youxiaozhi[ 11 ]
initial
begin
	u_youxiaozhi[11] = 1'b0;
end 
// u_youxiaozhi[ 10 ]
initial
begin
	u_youxiaozhi[10] = 1'b0;
end 
// u_youxiaozhi[ 9 ]
initial
begin
	u_youxiaozhi[9] = 1'b0;
end 
// u_youxiaozhi[ 8 ]
initial
begin
	u_youxiaozhi[8] = 1'b0;
end 
// u_youxiaozhi[ 7 ]
initial
begin
	u_youxiaozhi[7] = 1'b0;
end 
// u_youxiaozhi[ 6 ]
initial
begin
	u_youxiaozhi[6] = 1'b0;
end 
// u_youxiaozhi[ 5 ]
initial
begin
	u_youxiaozhi[5] = 1'b0;
end 
// u_youxiaozhi[ 4 ]
initial
begin
	u_youxiaozhi[4] = 1'b0;
end 
// u_youxiaozhi[ 3 ]
initial
begin
	u_youxiaozhi[3] = 1'b1;
end 
// u_youxiaozhi[ 2 ]
initial
begin
	u_youxiaozhi[2] = 1'b0;
end 
// u_youxiaozhi[ 1 ]
initial
begin
	u_youxiaozhi[1] = 1'b0;
end 
// u_youxiaozhi[ 0 ]
initial
begin
	u_youxiaozhi[0] = 1'b0;
end 

shizaigonglv_vlg_sample_tst tb_sample (
	.clk(clk),
	.i_youxiaozhi(i_youxiaozhi),
	.u_youxiaozhi(u_youxiaozhi),
	.sampler_tx(sampler)
);

shizaigonglv_vlg_check_tst tb_out(
	.shizaigonglv(shizaigonglv),
	.sampler_rx(sampler)
);
endmodule

