// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2023 14:44:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gonglvyinsu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gonglvyinsu_vlg_sample_tst(
	clk,
	shizai,
	yougong,
	sampler_tx
);
input  clk;
input [17:0] shizai;
input [17:0] yougong;
output sampler_tx;

reg sample;
time current_time;
always @(clk or shizai or yougong)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gonglvyinsu_vlg_check_tst (
	gonglvyinsu,
	s_gonglvyinsu25,
	s_result_100_25,
	sampler_rx
);
input [17:0] gonglvyinsu;
input [24:0] s_gonglvyinsu25;
input [24:0] s_result_100_25;
input sampler_rx;

reg [17:0] gonglvyinsu_expected;
reg [24:0] s_gonglvyinsu25_expected;
reg [24:0] s_result_100_25_expected;

reg [17:0] gonglvyinsu_prev;
reg [24:0] s_gonglvyinsu25_prev;
reg [24:0] s_result_100_25_prev;

reg [17:0] gonglvyinsu_expected_prev;
reg [24:0] s_gonglvyinsu25_expected_prev;
reg [24:0] s_result_100_25_expected_prev;

reg [17:0] last_gonglvyinsu_exp;
reg [24:0] last_s_gonglvyinsu25_exp;
reg [24:0] last_s_result_100_25_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	gonglvyinsu_prev = gonglvyinsu;
	s_gonglvyinsu25_prev = s_gonglvyinsu25;
	s_result_100_25_prev = s_result_100_25;
end

// update expected /o prevs

always @(trigger)
begin
	gonglvyinsu_expected_prev = gonglvyinsu_expected;
	s_gonglvyinsu25_expected_prev = s_gonglvyinsu25_expected;
	s_result_100_25_expected_prev = s_result_100_25_expected;
end


// expected gonglvyinsu[ 17 ]
initial
begin
	gonglvyinsu_expected[17] = 1'bX;
end 
// expected gonglvyinsu[ 16 ]
initial
begin
	gonglvyinsu_expected[16] = 1'bX;
end 
// expected gonglvyinsu[ 15 ]
initial
begin
	gonglvyinsu_expected[15] = 1'bX;
end 
// expected gonglvyinsu[ 14 ]
initial
begin
	gonglvyinsu_expected[14] = 1'bX;
end 
// expected gonglvyinsu[ 13 ]
initial
begin
	gonglvyinsu_expected[13] = 1'bX;
end 
// expected gonglvyinsu[ 12 ]
initial
begin
	gonglvyinsu_expected[12] = 1'bX;
end 
// expected gonglvyinsu[ 11 ]
initial
begin
	gonglvyinsu_expected[11] = 1'bX;
end 
// expected gonglvyinsu[ 10 ]
initial
begin
	gonglvyinsu_expected[10] = 1'bX;
end 
// expected gonglvyinsu[ 9 ]
initial
begin
	gonglvyinsu_expected[9] = 1'bX;
end 
// expected gonglvyinsu[ 8 ]
initial
begin
	gonglvyinsu_expected[8] = 1'bX;
end 
// expected gonglvyinsu[ 7 ]
initial
begin
	gonglvyinsu_expected[7] = 1'bX;
end 
// expected gonglvyinsu[ 6 ]
initial
begin
	gonglvyinsu_expected[6] = 1'bX;
end 
// expected gonglvyinsu[ 5 ]
initial
begin
	gonglvyinsu_expected[5] = 1'bX;
end 
// expected gonglvyinsu[ 4 ]
initial
begin
	gonglvyinsu_expected[4] = 1'bX;
end 
// expected gonglvyinsu[ 3 ]
initial
begin
	gonglvyinsu_expected[3] = 1'bX;
end 
// expected gonglvyinsu[ 2 ]
initial
begin
	gonglvyinsu_expected[2] = 1'bX;
end 
// expected gonglvyinsu[ 1 ]
initial
begin
	gonglvyinsu_expected[1] = 1'bX;
end 
// expected gonglvyinsu[ 0 ]
initial
begin
	gonglvyinsu_expected[0] = 1'bX;
end 
// expected s_gonglvyinsu25[ 24 ]
initial
begin
	s_gonglvyinsu25_expected[24] = 1'bX;
end 
// expected s_gonglvyinsu25[ 23 ]
initial
begin
	s_gonglvyinsu25_expected[23] = 1'bX;
end 
// expected s_gonglvyinsu25[ 22 ]
initial
begin
	s_gonglvyinsu25_expected[22] = 1'bX;
end 
// expected s_gonglvyinsu25[ 21 ]
initial
begin
	s_gonglvyinsu25_expected[21] = 1'bX;
end 
// expected s_gonglvyinsu25[ 20 ]
initial
begin
	s_gonglvyinsu25_expected[20] = 1'bX;
end 
// expected s_gonglvyinsu25[ 19 ]
initial
begin
	s_gonglvyinsu25_expected[19] = 1'bX;
end 
// expected s_gonglvyinsu25[ 18 ]
initial
begin
	s_gonglvyinsu25_expected[18] = 1'bX;
end 
// expected s_gonglvyinsu25[ 17 ]
initial
begin
	s_gonglvyinsu25_expected[17] = 1'bX;
end 
// expected s_gonglvyinsu25[ 16 ]
initial
begin
	s_gonglvyinsu25_expected[16] = 1'bX;
end 
// expected s_gonglvyinsu25[ 15 ]
initial
begin
	s_gonglvyinsu25_expected[15] = 1'bX;
end 
// expected s_gonglvyinsu25[ 14 ]
initial
begin
	s_gonglvyinsu25_expected[14] = 1'bX;
end 
// expected s_gonglvyinsu25[ 13 ]
initial
begin
	s_gonglvyinsu25_expected[13] = 1'bX;
end 
// expected s_gonglvyinsu25[ 12 ]
initial
begin
	s_gonglvyinsu25_expected[12] = 1'bX;
end 
// expected s_gonglvyinsu25[ 11 ]
initial
begin
	s_gonglvyinsu25_expected[11] = 1'bX;
end 
// expected s_gonglvyinsu25[ 10 ]
initial
begin
	s_gonglvyinsu25_expected[10] = 1'bX;
end 
// expected s_gonglvyinsu25[ 9 ]
initial
begin
	s_gonglvyinsu25_expected[9] = 1'bX;
end 
// expected s_gonglvyinsu25[ 8 ]
initial
begin
	s_gonglvyinsu25_expected[8] = 1'bX;
end 
// expected s_gonglvyinsu25[ 7 ]
initial
begin
	s_gonglvyinsu25_expected[7] = 1'bX;
end 
// expected s_gonglvyinsu25[ 6 ]
initial
begin
	s_gonglvyinsu25_expected[6] = 1'bX;
end 
// expected s_gonglvyinsu25[ 5 ]
initial
begin
	s_gonglvyinsu25_expected[5] = 1'bX;
end 
// expected s_gonglvyinsu25[ 4 ]
initial
begin
	s_gonglvyinsu25_expected[4] = 1'bX;
end 
// expected s_gonglvyinsu25[ 3 ]
initial
begin
	s_gonglvyinsu25_expected[3] = 1'bX;
end 
// expected s_gonglvyinsu25[ 2 ]
initial
begin
	s_gonglvyinsu25_expected[2] = 1'bX;
end 
// expected s_gonglvyinsu25[ 1 ]
initial
begin
	s_gonglvyinsu25_expected[1] = 1'bX;
end 
// expected s_gonglvyinsu25[ 0 ]
initial
begin
	s_gonglvyinsu25_expected[0] = 1'bX;
end 
// expected s_result_100_25[ 24 ]
initial
begin
	s_result_100_25_expected[24] = 1'bX;
end 
// expected s_result_100_25[ 23 ]
initial
begin
	s_result_100_25_expected[23] = 1'bX;
end 
// expected s_result_100_25[ 22 ]
initial
begin
	s_result_100_25_expected[22] = 1'bX;
end 
// expected s_result_100_25[ 21 ]
initial
begin
	s_result_100_25_expected[21] = 1'bX;
end 
// expected s_result_100_25[ 20 ]
initial
begin
	s_result_100_25_expected[20] = 1'bX;
end 
// expected s_result_100_25[ 19 ]
initial
begin
	s_result_100_25_expected[19] = 1'bX;
end 
// expected s_result_100_25[ 18 ]
initial
begin
	s_result_100_25_expected[18] = 1'bX;
end 
// expected s_result_100_25[ 17 ]
initial
begin
	s_result_100_25_expected[17] = 1'bX;
end 
// expected s_result_100_25[ 16 ]
initial
begin
	s_result_100_25_expected[16] = 1'bX;
end 
// expected s_result_100_25[ 15 ]
initial
begin
	s_result_100_25_expected[15] = 1'bX;
end 
// expected s_result_100_25[ 14 ]
initial
begin
	s_result_100_25_expected[14] = 1'bX;
end 
// expected s_result_100_25[ 13 ]
initial
begin
	s_result_100_25_expected[13] = 1'bX;
end 
// expected s_result_100_25[ 12 ]
initial
begin
	s_result_100_25_expected[12] = 1'bX;
end 
// expected s_result_100_25[ 11 ]
initial
begin
	s_result_100_25_expected[11] = 1'bX;
end 
// expected s_result_100_25[ 10 ]
initial
begin
	s_result_100_25_expected[10] = 1'bX;
end 
// expected s_result_100_25[ 9 ]
initial
begin
	s_result_100_25_expected[9] = 1'bX;
end 
// expected s_result_100_25[ 8 ]
initial
begin
	s_result_100_25_expected[8] = 1'bX;
end 
// expected s_result_100_25[ 7 ]
initial
begin
	s_result_100_25_expected[7] = 1'bX;
end 
// expected s_result_100_25[ 6 ]
initial
begin
	s_result_100_25_expected[6] = 1'bX;
end 
// expected s_result_100_25[ 5 ]
initial
begin
	s_result_100_25_expected[5] = 1'bX;
end 
// expected s_result_100_25[ 4 ]
initial
begin
	s_result_100_25_expected[4] = 1'bX;
end 
// expected s_result_100_25[ 3 ]
initial
begin
	s_result_100_25_expected[3] = 1'bX;
end 
// expected s_result_100_25[ 2 ]
initial
begin
	s_result_100_25_expected[2] = 1'bX;
end 
// expected s_result_100_25[ 1 ]
initial
begin
	s_result_100_25_expected[1] = 1'bX;
end 
// expected s_result_100_25[ 0 ]
initial
begin
	s_result_100_25_expected[0] = 1'bX;
end 
// generate trigger
always @(gonglvyinsu_expected or gonglvyinsu or s_gonglvyinsu25_expected or s_gonglvyinsu25 or s_result_100_25_expected or s_result_100_25)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected gonglvyinsu = %b | expected s_gonglvyinsu25 = %b | expected s_result_100_25 = %b | ",gonglvyinsu_expected_prev,s_gonglvyinsu25_expected_prev,s_result_100_25_expected_prev);
	$display("| real gonglvyinsu = %b | real s_gonglvyinsu25 = %b | real s_result_100_25 = %b | ",gonglvyinsu_prev,s_gonglvyinsu25_prev,s_result_100_25_prev);
`endif
	if (
		( gonglvyinsu_expected_prev[0] !== 1'bx ) && ( gonglvyinsu_prev[0] !== gonglvyinsu_expected_prev[0] )
		&& ((gonglvyinsu_expected_prev[0] !== last_gonglvyinsu_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[0] = gonglvyinsu_expected_prev[0];
	end
	if (
		( gonglvyinsu_expected_prev[1] !== 1'bx ) && ( gonglvyinsu_prev[1] !== gonglvyinsu_expected_prev[1] )
		&& ((gonglvyinsu_expected_prev[1] !== last_gonglvyinsu_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[1] = gonglvyinsu_expected_prev[1];
	end
	if (
		( gonglvyinsu_expected_prev[2] !== 1'bx ) && ( gonglvyinsu_prev[2] !== gonglvyinsu_expected_prev[2] )
		&& ((gonglvyinsu_expected_prev[2] !== last_gonglvyinsu_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[2] = gonglvyinsu_expected_prev[2];
	end
	if (
		( gonglvyinsu_expected_prev[3] !== 1'bx ) && ( gonglvyinsu_prev[3] !== gonglvyinsu_expected_prev[3] )
		&& ((gonglvyinsu_expected_prev[3] !== last_gonglvyinsu_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[3] = gonglvyinsu_expected_prev[3];
	end
	if (
		( gonglvyinsu_expected_prev[4] !== 1'bx ) && ( gonglvyinsu_prev[4] !== gonglvyinsu_expected_prev[4] )
		&& ((gonglvyinsu_expected_prev[4] !== last_gonglvyinsu_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[4] = gonglvyinsu_expected_prev[4];
	end
	if (
		( gonglvyinsu_expected_prev[5] !== 1'bx ) && ( gonglvyinsu_prev[5] !== gonglvyinsu_expected_prev[5] )
		&& ((gonglvyinsu_expected_prev[5] !== last_gonglvyinsu_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[5] = gonglvyinsu_expected_prev[5];
	end
	if (
		( gonglvyinsu_expected_prev[6] !== 1'bx ) && ( gonglvyinsu_prev[6] !== gonglvyinsu_expected_prev[6] )
		&& ((gonglvyinsu_expected_prev[6] !== last_gonglvyinsu_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[6] = gonglvyinsu_expected_prev[6];
	end
	if (
		( gonglvyinsu_expected_prev[7] !== 1'bx ) && ( gonglvyinsu_prev[7] !== gonglvyinsu_expected_prev[7] )
		&& ((gonglvyinsu_expected_prev[7] !== last_gonglvyinsu_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[7] = gonglvyinsu_expected_prev[7];
	end
	if (
		( gonglvyinsu_expected_prev[8] !== 1'bx ) && ( gonglvyinsu_prev[8] !== gonglvyinsu_expected_prev[8] )
		&& ((gonglvyinsu_expected_prev[8] !== last_gonglvyinsu_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[8] = gonglvyinsu_expected_prev[8];
	end
	if (
		( gonglvyinsu_expected_prev[9] !== 1'bx ) && ( gonglvyinsu_prev[9] !== gonglvyinsu_expected_prev[9] )
		&& ((gonglvyinsu_expected_prev[9] !== last_gonglvyinsu_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[9] = gonglvyinsu_expected_prev[9];
	end
	if (
		( gonglvyinsu_expected_prev[10] !== 1'bx ) && ( gonglvyinsu_prev[10] !== gonglvyinsu_expected_prev[10] )
		&& ((gonglvyinsu_expected_prev[10] !== last_gonglvyinsu_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[10] = gonglvyinsu_expected_prev[10];
	end
	if (
		( gonglvyinsu_expected_prev[11] !== 1'bx ) && ( gonglvyinsu_prev[11] !== gonglvyinsu_expected_prev[11] )
		&& ((gonglvyinsu_expected_prev[11] !== last_gonglvyinsu_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[11] = gonglvyinsu_expected_prev[11];
	end
	if (
		( gonglvyinsu_expected_prev[12] !== 1'bx ) && ( gonglvyinsu_prev[12] !== gonglvyinsu_expected_prev[12] )
		&& ((gonglvyinsu_expected_prev[12] !== last_gonglvyinsu_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[12] = gonglvyinsu_expected_prev[12];
	end
	if (
		( gonglvyinsu_expected_prev[13] !== 1'bx ) && ( gonglvyinsu_prev[13] !== gonglvyinsu_expected_prev[13] )
		&& ((gonglvyinsu_expected_prev[13] !== last_gonglvyinsu_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[13] = gonglvyinsu_expected_prev[13];
	end
	if (
		( gonglvyinsu_expected_prev[14] !== 1'bx ) && ( gonglvyinsu_prev[14] !== gonglvyinsu_expected_prev[14] )
		&& ((gonglvyinsu_expected_prev[14] !== last_gonglvyinsu_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[14] = gonglvyinsu_expected_prev[14];
	end
	if (
		( gonglvyinsu_expected_prev[15] !== 1'bx ) && ( gonglvyinsu_prev[15] !== gonglvyinsu_expected_prev[15] )
		&& ((gonglvyinsu_expected_prev[15] !== last_gonglvyinsu_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[15] = gonglvyinsu_expected_prev[15];
	end
	if (
		( gonglvyinsu_expected_prev[16] !== 1'bx ) && ( gonglvyinsu_prev[16] !== gonglvyinsu_expected_prev[16] )
		&& ((gonglvyinsu_expected_prev[16] !== last_gonglvyinsu_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[16] = gonglvyinsu_expected_prev[16];
	end
	if (
		( gonglvyinsu_expected_prev[17] !== 1'bx ) && ( gonglvyinsu_prev[17] !== gonglvyinsu_expected_prev[17] )
		&& ((gonglvyinsu_expected_prev[17] !== last_gonglvyinsu_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gonglvyinsu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gonglvyinsu_expected_prev);
		$display ("     Real value = %b", gonglvyinsu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gonglvyinsu_exp[17] = gonglvyinsu_expected_prev[17];
	end
	if (
		( s_gonglvyinsu25_expected_prev[0] !== 1'bx ) && ( s_gonglvyinsu25_prev[0] !== s_gonglvyinsu25_expected_prev[0] )
		&& ((s_gonglvyinsu25_expected_prev[0] !== last_s_gonglvyinsu25_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[0] = s_gonglvyinsu25_expected_prev[0];
	end
	if (
		( s_gonglvyinsu25_expected_prev[1] !== 1'bx ) && ( s_gonglvyinsu25_prev[1] !== s_gonglvyinsu25_expected_prev[1] )
		&& ((s_gonglvyinsu25_expected_prev[1] !== last_s_gonglvyinsu25_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[1] = s_gonglvyinsu25_expected_prev[1];
	end
	if (
		( s_gonglvyinsu25_expected_prev[2] !== 1'bx ) && ( s_gonglvyinsu25_prev[2] !== s_gonglvyinsu25_expected_prev[2] )
		&& ((s_gonglvyinsu25_expected_prev[2] !== last_s_gonglvyinsu25_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[2] = s_gonglvyinsu25_expected_prev[2];
	end
	if (
		( s_gonglvyinsu25_expected_prev[3] !== 1'bx ) && ( s_gonglvyinsu25_prev[3] !== s_gonglvyinsu25_expected_prev[3] )
		&& ((s_gonglvyinsu25_expected_prev[3] !== last_s_gonglvyinsu25_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[3] = s_gonglvyinsu25_expected_prev[3];
	end
	if (
		( s_gonglvyinsu25_expected_prev[4] !== 1'bx ) && ( s_gonglvyinsu25_prev[4] !== s_gonglvyinsu25_expected_prev[4] )
		&& ((s_gonglvyinsu25_expected_prev[4] !== last_s_gonglvyinsu25_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[4] = s_gonglvyinsu25_expected_prev[4];
	end
	if (
		( s_gonglvyinsu25_expected_prev[5] !== 1'bx ) && ( s_gonglvyinsu25_prev[5] !== s_gonglvyinsu25_expected_prev[5] )
		&& ((s_gonglvyinsu25_expected_prev[5] !== last_s_gonglvyinsu25_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[5] = s_gonglvyinsu25_expected_prev[5];
	end
	if (
		( s_gonglvyinsu25_expected_prev[6] !== 1'bx ) && ( s_gonglvyinsu25_prev[6] !== s_gonglvyinsu25_expected_prev[6] )
		&& ((s_gonglvyinsu25_expected_prev[6] !== last_s_gonglvyinsu25_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[6] = s_gonglvyinsu25_expected_prev[6];
	end
	if (
		( s_gonglvyinsu25_expected_prev[7] !== 1'bx ) && ( s_gonglvyinsu25_prev[7] !== s_gonglvyinsu25_expected_prev[7] )
		&& ((s_gonglvyinsu25_expected_prev[7] !== last_s_gonglvyinsu25_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[7] = s_gonglvyinsu25_expected_prev[7];
	end
	if (
		( s_gonglvyinsu25_expected_prev[8] !== 1'bx ) && ( s_gonglvyinsu25_prev[8] !== s_gonglvyinsu25_expected_prev[8] )
		&& ((s_gonglvyinsu25_expected_prev[8] !== last_s_gonglvyinsu25_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[8] = s_gonglvyinsu25_expected_prev[8];
	end
	if (
		( s_gonglvyinsu25_expected_prev[9] !== 1'bx ) && ( s_gonglvyinsu25_prev[9] !== s_gonglvyinsu25_expected_prev[9] )
		&& ((s_gonglvyinsu25_expected_prev[9] !== last_s_gonglvyinsu25_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[9] = s_gonglvyinsu25_expected_prev[9];
	end
	if (
		( s_gonglvyinsu25_expected_prev[10] !== 1'bx ) && ( s_gonglvyinsu25_prev[10] !== s_gonglvyinsu25_expected_prev[10] )
		&& ((s_gonglvyinsu25_expected_prev[10] !== last_s_gonglvyinsu25_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[10] = s_gonglvyinsu25_expected_prev[10];
	end
	if (
		( s_gonglvyinsu25_expected_prev[11] !== 1'bx ) && ( s_gonglvyinsu25_prev[11] !== s_gonglvyinsu25_expected_prev[11] )
		&& ((s_gonglvyinsu25_expected_prev[11] !== last_s_gonglvyinsu25_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[11] = s_gonglvyinsu25_expected_prev[11];
	end
	if (
		( s_gonglvyinsu25_expected_prev[12] !== 1'bx ) && ( s_gonglvyinsu25_prev[12] !== s_gonglvyinsu25_expected_prev[12] )
		&& ((s_gonglvyinsu25_expected_prev[12] !== last_s_gonglvyinsu25_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[12] = s_gonglvyinsu25_expected_prev[12];
	end
	if (
		( s_gonglvyinsu25_expected_prev[13] !== 1'bx ) && ( s_gonglvyinsu25_prev[13] !== s_gonglvyinsu25_expected_prev[13] )
		&& ((s_gonglvyinsu25_expected_prev[13] !== last_s_gonglvyinsu25_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[13] = s_gonglvyinsu25_expected_prev[13];
	end
	if (
		( s_gonglvyinsu25_expected_prev[14] !== 1'bx ) && ( s_gonglvyinsu25_prev[14] !== s_gonglvyinsu25_expected_prev[14] )
		&& ((s_gonglvyinsu25_expected_prev[14] !== last_s_gonglvyinsu25_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[14] = s_gonglvyinsu25_expected_prev[14];
	end
	if (
		( s_gonglvyinsu25_expected_prev[15] !== 1'bx ) && ( s_gonglvyinsu25_prev[15] !== s_gonglvyinsu25_expected_prev[15] )
		&& ((s_gonglvyinsu25_expected_prev[15] !== last_s_gonglvyinsu25_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[15] = s_gonglvyinsu25_expected_prev[15];
	end
	if (
		( s_gonglvyinsu25_expected_prev[16] !== 1'bx ) && ( s_gonglvyinsu25_prev[16] !== s_gonglvyinsu25_expected_prev[16] )
		&& ((s_gonglvyinsu25_expected_prev[16] !== last_s_gonglvyinsu25_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[16] = s_gonglvyinsu25_expected_prev[16];
	end
	if (
		( s_gonglvyinsu25_expected_prev[17] !== 1'bx ) && ( s_gonglvyinsu25_prev[17] !== s_gonglvyinsu25_expected_prev[17] )
		&& ((s_gonglvyinsu25_expected_prev[17] !== last_s_gonglvyinsu25_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[17] = s_gonglvyinsu25_expected_prev[17];
	end
	if (
		( s_gonglvyinsu25_expected_prev[18] !== 1'bx ) && ( s_gonglvyinsu25_prev[18] !== s_gonglvyinsu25_expected_prev[18] )
		&& ((s_gonglvyinsu25_expected_prev[18] !== last_s_gonglvyinsu25_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[18] = s_gonglvyinsu25_expected_prev[18];
	end
	if (
		( s_gonglvyinsu25_expected_prev[19] !== 1'bx ) && ( s_gonglvyinsu25_prev[19] !== s_gonglvyinsu25_expected_prev[19] )
		&& ((s_gonglvyinsu25_expected_prev[19] !== last_s_gonglvyinsu25_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[19] = s_gonglvyinsu25_expected_prev[19];
	end
	if (
		( s_gonglvyinsu25_expected_prev[20] !== 1'bx ) && ( s_gonglvyinsu25_prev[20] !== s_gonglvyinsu25_expected_prev[20] )
		&& ((s_gonglvyinsu25_expected_prev[20] !== last_s_gonglvyinsu25_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[20] = s_gonglvyinsu25_expected_prev[20];
	end
	if (
		( s_gonglvyinsu25_expected_prev[21] !== 1'bx ) && ( s_gonglvyinsu25_prev[21] !== s_gonglvyinsu25_expected_prev[21] )
		&& ((s_gonglvyinsu25_expected_prev[21] !== last_s_gonglvyinsu25_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[21] = s_gonglvyinsu25_expected_prev[21];
	end
	if (
		( s_gonglvyinsu25_expected_prev[22] !== 1'bx ) && ( s_gonglvyinsu25_prev[22] !== s_gonglvyinsu25_expected_prev[22] )
		&& ((s_gonglvyinsu25_expected_prev[22] !== last_s_gonglvyinsu25_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[22] = s_gonglvyinsu25_expected_prev[22];
	end
	if (
		( s_gonglvyinsu25_expected_prev[23] !== 1'bx ) && ( s_gonglvyinsu25_prev[23] !== s_gonglvyinsu25_expected_prev[23] )
		&& ((s_gonglvyinsu25_expected_prev[23] !== last_s_gonglvyinsu25_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[23] = s_gonglvyinsu25_expected_prev[23];
	end
	if (
		( s_gonglvyinsu25_expected_prev[24] !== 1'bx ) && ( s_gonglvyinsu25_prev[24] !== s_gonglvyinsu25_expected_prev[24] )
		&& ((s_gonglvyinsu25_expected_prev[24] !== last_s_gonglvyinsu25_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_gonglvyinsu25[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_gonglvyinsu25_expected_prev);
		$display ("     Real value = %b", s_gonglvyinsu25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_gonglvyinsu25_exp[24] = s_gonglvyinsu25_expected_prev[24];
	end
	if (
		( s_result_100_25_expected_prev[0] !== 1'bx ) && ( s_result_100_25_prev[0] !== s_result_100_25_expected_prev[0] )
		&& ((s_result_100_25_expected_prev[0] !== last_s_result_100_25_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[0] = s_result_100_25_expected_prev[0];
	end
	if (
		( s_result_100_25_expected_prev[1] !== 1'bx ) && ( s_result_100_25_prev[1] !== s_result_100_25_expected_prev[1] )
		&& ((s_result_100_25_expected_prev[1] !== last_s_result_100_25_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[1] = s_result_100_25_expected_prev[1];
	end
	if (
		( s_result_100_25_expected_prev[2] !== 1'bx ) && ( s_result_100_25_prev[2] !== s_result_100_25_expected_prev[2] )
		&& ((s_result_100_25_expected_prev[2] !== last_s_result_100_25_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[2] = s_result_100_25_expected_prev[2];
	end
	if (
		( s_result_100_25_expected_prev[3] !== 1'bx ) && ( s_result_100_25_prev[3] !== s_result_100_25_expected_prev[3] )
		&& ((s_result_100_25_expected_prev[3] !== last_s_result_100_25_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[3] = s_result_100_25_expected_prev[3];
	end
	if (
		( s_result_100_25_expected_prev[4] !== 1'bx ) && ( s_result_100_25_prev[4] !== s_result_100_25_expected_prev[4] )
		&& ((s_result_100_25_expected_prev[4] !== last_s_result_100_25_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[4] = s_result_100_25_expected_prev[4];
	end
	if (
		( s_result_100_25_expected_prev[5] !== 1'bx ) && ( s_result_100_25_prev[5] !== s_result_100_25_expected_prev[5] )
		&& ((s_result_100_25_expected_prev[5] !== last_s_result_100_25_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[5] = s_result_100_25_expected_prev[5];
	end
	if (
		( s_result_100_25_expected_prev[6] !== 1'bx ) && ( s_result_100_25_prev[6] !== s_result_100_25_expected_prev[6] )
		&& ((s_result_100_25_expected_prev[6] !== last_s_result_100_25_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[6] = s_result_100_25_expected_prev[6];
	end
	if (
		( s_result_100_25_expected_prev[7] !== 1'bx ) && ( s_result_100_25_prev[7] !== s_result_100_25_expected_prev[7] )
		&& ((s_result_100_25_expected_prev[7] !== last_s_result_100_25_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[7] = s_result_100_25_expected_prev[7];
	end
	if (
		( s_result_100_25_expected_prev[8] !== 1'bx ) && ( s_result_100_25_prev[8] !== s_result_100_25_expected_prev[8] )
		&& ((s_result_100_25_expected_prev[8] !== last_s_result_100_25_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[8] = s_result_100_25_expected_prev[8];
	end
	if (
		( s_result_100_25_expected_prev[9] !== 1'bx ) && ( s_result_100_25_prev[9] !== s_result_100_25_expected_prev[9] )
		&& ((s_result_100_25_expected_prev[9] !== last_s_result_100_25_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[9] = s_result_100_25_expected_prev[9];
	end
	if (
		( s_result_100_25_expected_prev[10] !== 1'bx ) && ( s_result_100_25_prev[10] !== s_result_100_25_expected_prev[10] )
		&& ((s_result_100_25_expected_prev[10] !== last_s_result_100_25_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[10] = s_result_100_25_expected_prev[10];
	end
	if (
		( s_result_100_25_expected_prev[11] !== 1'bx ) && ( s_result_100_25_prev[11] !== s_result_100_25_expected_prev[11] )
		&& ((s_result_100_25_expected_prev[11] !== last_s_result_100_25_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[11] = s_result_100_25_expected_prev[11];
	end
	if (
		( s_result_100_25_expected_prev[12] !== 1'bx ) && ( s_result_100_25_prev[12] !== s_result_100_25_expected_prev[12] )
		&& ((s_result_100_25_expected_prev[12] !== last_s_result_100_25_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[12] = s_result_100_25_expected_prev[12];
	end
	if (
		( s_result_100_25_expected_prev[13] !== 1'bx ) && ( s_result_100_25_prev[13] !== s_result_100_25_expected_prev[13] )
		&& ((s_result_100_25_expected_prev[13] !== last_s_result_100_25_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[13] = s_result_100_25_expected_prev[13];
	end
	if (
		( s_result_100_25_expected_prev[14] !== 1'bx ) && ( s_result_100_25_prev[14] !== s_result_100_25_expected_prev[14] )
		&& ((s_result_100_25_expected_prev[14] !== last_s_result_100_25_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[14] = s_result_100_25_expected_prev[14];
	end
	if (
		( s_result_100_25_expected_prev[15] !== 1'bx ) && ( s_result_100_25_prev[15] !== s_result_100_25_expected_prev[15] )
		&& ((s_result_100_25_expected_prev[15] !== last_s_result_100_25_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[15] = s_result_100_25_expected_prev[15];
	end
	if (
		( s_result_100_25_expected_prev[16] !== 1'bx ) && ( s_result_100_25_prev[16] !== s_result_100_25_expected_prev[16] )
		&& ((s_result_100_25_expected_prev[16] !== last_s_result_100_25_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[16] = s_result_100_25_expected_prev[16];
	end
	if (
		( s_result_100_25_expected_prev[17] !== 1'bx ) && ( s_result_100_25_prev[17] !== s_result_100_25_expected_prev[17] )
		&& ((s_result_100_25_expected_prev[17] !== last_s_result_100_25_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[17] = s_result_100_25_expected_prev[17];
	end
	if (
		( s_result_100_25_expected_prev[18] !== 1'bx ) && ( s_result_100_25_prev[18] !== s_result_100_25_expected_prev[18] )
		&& ((s_result_100_25_expected_prev[18] !== last_s_result_100_25_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[18] = s_result_100_25_expected_prev[18];
	end
	if (
		( s_result_100_25_expected_prev[19] !== 1'bx ) && ( s_result_100_25_prev[19] !== s_result_100_25_expected_prev[19] )
		&& ((s_result_100_25_expected_prev[19] !== last_s_result_100_25_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[19] = s_result_100_25_expected_prev[19];
	end
	if (
		( s_result_100_25_expected_prev[20] !== 1'bx ) && ( s_result_100_25_prev[20] !== s_result_100_25_expected_prev[20] )
		&& ((s_result_100_25_expected_prev[20] !== last_s_result_100_25_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[20] = s_result_100_25_expected_prev[20];
	end
	if (
		( s_result_100_25_expected_prev[21] !== 1'bx ) && ( s_result_100_25_prev[21] !== s_result_100_25_expected_prev[21] )
		&& ((s_result_100_25_expected_prev[21] !== last_s_result_100_25_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[21] = s_result_100_25_expected_prev[21];
	end
	if (
		( s_result_100_25_expected_prev[22] !== 1'bx ) && ( s_result_100_25_prev[22] !== s_result_100_25_expected_prev[22] )
		&& ((s_result_100_25_expected_prev[22] !== last_s_result_100_25_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[22] = s_result_100_25_expected_prev[22];
	end
	if (
		( s_result_100_25_expected_prev[23] !== 1'bx ) && ( s_result_100_25_prev[23] !== s_result_100_25_expected_prev[23] )
		&& ((s_result_100_25_expected_prev[23] !== last_s_result_100_25_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[23] = s_result_100_25_expected_prev[23];
	end
	if (
		( s_result_100_25_expected_prev[24] !== 1'bx ) && ( s_result_100_25_prev[24] !== s_result_100_25_expected_prev[24] )
		&& ((s_result_100_25_expected_prev[24] !== last_s_result_100_25_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_result_100_25[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_result_100_25_expected_prev);
		$display ("     Real value = %b", s_result_100_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_result_100_25_exp[24] = s_result_100_25_expected_prev[24];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gonglvyinsu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [17:0] shizai;
reg [17:0] yougong;
// wires                                               
wire [17:0] gonglvyinsu;
wire [24:0] s_gonglvyinsu25;
wire [24:0] s_result_100_25;

wire sampler;                             

// assign statements (if any)                          
gonglvyinsu i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.gonglvyinsu(gonglvyinsu),
	.s_gonglvyinsu25(s_gonglvyinsu25),
	.s_result_100_25(s_result_100_25),
	.shizai(shizai),
	.yougong(yougong)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// shizai[ 17 ]
initial
begin
	shizai[17] = 1'b0;
end 
// shizai[ 16 ]
initial
begin
	shizai[16] = 1'b0;
end 
// shizai[ 15 ]
initial
begin
	shizai[15] = 1'b0;
end 
// shizai[ 14 ]
initial
begin
	shizai[14] = 1'b0;
end 
// shizai[ 13 ]
initial
begin
	shizai[13] = 1'b0;
end 
// shizai[ 12 ]
initial
begin
	shizai[12] = 1'b0;
end 
// shizai[ 11 ]
initial
begin
	shizai[11] = 1'b0;
end 
// shizai[ 10 ]
initial
begin
	shizai[10] = 1'b0;
end 
// shizai[ 9 ]
initial
begin
	shizai[9] = 1'b0;
end 
// shizai[ 8 ]
initial
begin
	shizai[8] = 1'b1;
end 
// shizai[ 7 ]
initial
begin
	shizai[7] = 1'b1;
end 
// shizai[ 6 ]
initial
begin
	shizai[6] = 1'b0;
end 
// shizai[ 5 ]
initial
begin
	shizai[5] = 1'b0;
end 
// shizai[ 4 ]
initial
begin
	shizai[4] = 1'b1;
end 
// shizai[ 3 ]
initial
begin
	shizai[3] = 1'b0;
end 
// shizai[ 2 ]
initial
begin
	shizai[2] = 1'b0;
end 
// shizai[ 1 ]
initial
begin
	shizai[1] = 1'b0;
end 
// shizai[ 0 ]
initial
begin
	shizai[0] = 1'b0;
end 
// yougong[ 17 ]
initial
begin
	yougong[17] = 1'b0;
end 
// yougong[ 16 ]
initial
begin
	yougong[16] = 1'b0;
end 
// yougong[ 15 ]
initial
begin
	yougong[15] = 1'b0;
end 
// yougong[ 14 ]
initial
begin
	yougong[14] = 1'b0;
end 
// yougong[ 13 ]
initial
begin
	yougong[13] = 1'b0;
end 
// yougong[ 12 ]
initial
begin
	yougong[12] = 1'b0;
end 
// yougong[ 11 ]
initial
begin
	yougong[11] = 1'b0;
end 
// yougong[ 10 ]
initial
begin
	yougong[10] = 1'b0;
end 
// yougong[ 9 ]
initial
begin
	yougong[9] = 1'b0;
end 
// yougong[ 8 ]
initial
begin
	yougong[8] = 1'b0;
end 
// yougong[ 7 ]
initial
begin
	yougong[7] = 1'b1;
end 
// yougong[ 6 ]
initial
begin
	yougong[6] = 1'b1;
end 
// yougong[ 5 ]
initial
begin
	yougong[5] = 1'b0;
end 
// yougong[ 4 ]
initial
begin
	yougong[4] = 1'b0;
end 
// yougong[ 3 ]
initial
begin
	yougong[3] = 1'b1;
end 
// yougong[ 2 ]
initial
begin
	yougong[2] = 1'b0;
end 
// yougong[ 1 ]
initial
begin
	yougong[1] = 1'b0;
end 
// yougong[ 0 ]
initial
begin
	yougong[0] = 1'b0;
end 

gonglvyinsu_vlg_sample_tst tb_sample (
	.clk(clk),
	.shizai(shizai),
	.yougong(yougong),
	.sampler_tx(sampler)
);

gonglvyinsu_vlg_check_tst tb_out(
	.gonglvyinsu(gonglvyinsu),
	.s_gonglvyinsu25(s_gonglvyinsu25),
	.s_result_100_25(s_result_100_25),
	.sampler_rx(sampler)
);
endmodule

