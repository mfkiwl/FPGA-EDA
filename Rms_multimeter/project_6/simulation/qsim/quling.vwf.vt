// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2023 19:45:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    quling
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module quling_vlg_sample_tst(
	din0,
	din1,
	din2,
	din3,
	din4,
	sampler_tx
);
input [7:0] din0;
input [7:0] din1;
input [7:0] din2;
input [7:0] din3;
input [7:0] din4;
output sampler_tx;

reg sample;
time current_time;
always @(din0 or din1 or din2 or din3 or din4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module quling_vlg_check_tst (
	dout0,
	dout1,
	dout2,
	dout3,
	dout4,
	sampler_rx
);
input [7:0] dout0;
input [7:0] dout1;
input [7:0] dout2;
input [7:0] dout3;
input [7:0] dout4;
input sampler_rx;

reg [7:0] dout0_expected;
reg [7:0] dout1_expected;
reg [7:0] dout2_expected;
reg [7:0] dout3_expected;
reg [7:0] dout4_expected;

reg [7:0] dout0_prev;
reg [7:0] dout1_prev;
reg [7:0] dout2_prev;
reg [7:0] dout3_prev;
reg [7:0] dout4_prev;

reg [7:0] dout0_expected_prev;
reg [7:0] dout1_expected_prev;
reg [7:0] dout2_expected_prev;
reg [7:0] dout3_expected_prev;
reg [7:0] dout4_expected_prev;

reg [7:0] last_dout0_exp;
reg [7:0] last_dout1_exp;
reg [7:0] last_dout2_exp;
reg [7:0] last_dout3_exp;
reg [7:0] last_dout4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout0_prev = dout0;
	dout1_prev = dout1;
	dout2_prev = dout2;
	dout3_prev = dout3;
	dout4_prev = dout4;
end

// update expected /o prevs

always @(trigger)
begin
	dout0_expected_prev = dout0_expected;
	dout1_expected_prev = dout1_expected;
	dout2_expected_prev = dout2_expected;
	dout3_expected_prev = dout3_expected;
	dout4_expected_prev = dout4_expected;
end


// expected dout0[ 7 ]
initial
begin
	dout0_expected[7] = 1'bX;
end 
// expected dout0[ 6 ]
initial
begin
	dout0_expected[6] = 1'bX;
end 
// expected dout0[ 5 ]
initial
begin
	dout0_expected[5] = 1'bX;
end 
// expected dout0[ 4 ]
initial
begin
	dout0_expected[4] = 1'bX;
end 
// expected dout0[ 3 ]
initial
begin
	dout0_expected[3] = 1'bX;
end 
// expected dout0[ 2 ]
initial
begin
	dout0_expected[2] = 1'bX;
end 
// expected dout0[ 1 ]
initial
begin
	dout0_expected[1] = 1'bX;
end 
// expected dout0[ 0 ]
initial
begin
	dout0_expected[0] = 1'bX;
end 
// expected dout1[ 7 ]
initial
begin
	dout1_expected[7] = 1'bX;
end 
// expected dout1[ 6 ]
initial
begin
	dout1_expected[6] = 1'bX;
end 
// expected dout1[ 5 ]
initial
begin
	dout1_expected[5] = 1'bX;
end 
// expected dout1[ 4 ]
initial
begin
	dout1_expected[4] = 1'bX;
end 
// expected dout1[ 3 ]
initial
begin
	dout1_expected[3] = 1'bX;
end 
// expected dout1[ 2 ]
initial
begin
	dout1_expected[2] = 1'bX;
end 
// expected dout1[ 1 ]
initial
begin
	dout1_expected[1] = 1'bX;
end 
// expected dout1[ 0 ]
initial
begin
	dout1_expected[0] = 1'bX;
end 
// expected dout2[ 7 ]
initial
begin
	dout2_expected[7] = 1'bX;
end 
// expected dout2[ 6 ]
initial
begin
	dout2_expected[6] = 1'bX;
end 
// expected dout2[ 5 ]
initial
begin
	dout2_expected[5] = 1'bX;
end 
// expected dout2[ 4 ]
initial
begin
	dout2_expected[4] = 1'bX;
end 
// expected dout2[ 3 ]
initial
begin
	dout2_expected[3] = 1'bX;
end 
// expected dout2[ 2 ]
initial
begin
	dout2_expected[2] = 1'bX;
end 
// expected dout2[ 1 ]
initial
begin
	dout2_expected[1] = 1'bX;
end 
// expected dout2[ 0 ]
initial
begin
	dout2_expected[0] = 1'bX;
end 
// expected dout3[ 7 ]
initial
begin
	dout3_expected[7] = 1'bX;
end 
// expected dout3[ 6 ]
initial
begin
	dout3_expected[6] = 1'bX;
end 
// expected dout3[ 5 ]
initial
begin
	dout3_expected[5] = 1'bX;
end 
// expected dout3[ 4 ]
initial
begin
	dout3_expected[4] = 1'bX;
end 
// expected dout3[ 3 ]
initial
begin
	dout3_expected[3] = 1'bX;
end 
// expected dout3[ 2 ]
initial
begin
	dout3_expected[2] = 1'bX;
end 
// expected dout3[ 1 ]
initial
begin
	dout3_expected[1] = 1'bX;
end 
// expected dout3[ 0 ]
initial
begin
	dout3_expected[0] = 1'bX;
end 
// expected dout4[ 7 ]
initial
begin
	dout4_expected[7] = 1'bX;
end 
// expected dout4[ 6 ]
initial
begin
	dout4_expected[6] = 1'bX;
end 
// expected dout4[ 5 ]
initial
begin
	dout4_expected[5] = 1'bX;
end 
// expected dout4[ 4 ]
initial
begin
	dout4_expected[4] = 1'bX;
end 
// expected dout4[ 3 ]
initial
begin
	dout4_expected[3] = 1'bX;
end 
// expected dout4[ 2 ]
initial
begin
	dout4_expected[2] = 1'bX;
end 
// expected dout4[ 1 ]
initial
begin
	dout4_expected[1] = 1'bX;
end 
// expected dout4[ 0 ]
initial
begin
	dout4_expected[0] = 1'bX;
end 
// generate trigger
always @(dout0_expected or dout0 or dout1_expected or dout1 or dout2_expected or dout2 or dout3_expected or dout3 or dout4_expected or dout4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout0 = %b | expected dout1 = %b | expected dout2 = %b | expected dout3 = %b | expected dout4 = %b | ",dout0_expected_prev,dout1_expected_prev,dout2_expected_prev,dout3_expected_prev,dout4_expected_prev);
	$display("| real dout0 = %b | real dout1 = %b | real dout2 = %b | real dout3 = %b | real dout4 = %b | ",dout0_prev,dout1_prev,dout2_prev,dout3_prev,dout4_prev);
`endif
	if (
		( dout0_expected_prev[0] !== 1'bx ) && ( dout0_prev[0] !== dout0_expected_prev[0] )
		&& ((dout0_expected_prev[0] !== last_dout0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[0] = dout0_expected_prev[0];
	end
	if (
		( dout0_expected_prev[1] !== 1'bx ) && ( dout0_prev[1] !== dout0_expected_prev[1] )
		&& ((dout0_expected_prev[1] !== last_dout0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[1] = dout0_expected_prev[1];
	end
	if (
		( dout0_expected_prev[2] !== 1'bx ) && ( dout0_prev[2] !== dout0_expected_prev[2] )
		&& ((dout0_expected_prev[2] !== last_dout0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[2] = dout0_expected_prev[2];
	end
	if (
		( dout0_expected_prev[3] !== 1'bx ) && ( dout0_prev[3] !== dout0_expected_prev[3] )
		&& ((dout0_expected_prev[3] !== last_dout0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[3] = dout0_expected_prev[3];
	end
	if (
		( dout0_expected_prev[4] !== 1'bx ) && ( dout0_prev[4] !== dout0_expected_prev[4] )
		&& ((dout0_expected_prev[4] !== last_dout0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[4] = dout0_expected_prev[4];
	end
	if (
		( dout0_expected_prev[5] !== 1'bx ) && ( dout0_prev[5] !== dout0_expected_prev[5] )
		&& ((dout0_expected_prev[5] !== last_dout0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[5] = dout0_expected_prev[5];
	end
	if (
		( dout0_expected_prev[6] !== 1'bx ) && ( dout0_prev[6] !== dout0_expected_prev[6] )
		&& ((dout0_expected_prev[6] !== last_dout0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[6] = dout0_expected_prev[6];
	end
	if (
		( dout0_expected_prev[7] !== 1'bx ) && ( dout0_prev[7] !== dout0_expected_prev[7] )
		&& ((dout0_expected_prev[7] !== last_dout0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp[7] = dout0_expected_prev[7];
	end
	if (
		( dout1_expected_prev[0] !== 1'bx ) && ( dout1_prev[0] !== dout1_expected_prev[0] )
		&& ((dout1_expected_prev[0] !== last_dout1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[0] = dout1_expected_prev[0];
	end
	if (
		( dout1_expected_prev[1] !== 1'bx ) && ( dout1_prev[1] !== dout1_expected_prev[1] )
		&& ((dout1_expected_prev[1] !== last_dout1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[1] = dout1_expected_prev[1];
	end
	if (
		( dout1_expected_prev[2] !== 1'bx ) && ( dout1_prev[2] !== dout1_expected_prev[2] )
		&& ((dout1_expected_prev[2] !== last_dout1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[2] = dout1_expected_prev[2];
	end
	if (
		( dout1_expected_prev[3] !== 1'bx ) && ( dout1_prev[3] !== dout1_expected_prev[3] )
		&& ((dout1_expected_prev[3] !== last_dout1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[3] = dout1_expected_prev[3];
	end
	if (
		( dout1_expected_prev[4] !== 1'bx ) && ( dout1_prev[4] !== dout1_expected_prev[4] )
		&& ((dout1_expected_prev[4] !== last_dout1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[4] = dout1_expected_prev[4];
	end
	if (
		( dout1_expected_prev[5] !== 1'bx ) && ( dout1_prev[5] !== dout1_expected_prev[5] )
		&& ((dout1_expected_prev[5] !== last_dout1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[5] = dout1_expected_prev[5];
	end
	if (
		( dout1_expected_prev[6] !== 1'bx ) && ( dout1_prev[6] !== dout1_expected_prev[6] )
		&& ((dout1_expected_prev[6] !== last_dout1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[6] = dout1_expected_prev[6];
	end
	if (
		( dout1_expected_prev[7] !== 1'bx ) && ( dout1_prev[7] !== dout1_expected_prev[7] )
		&& ((dout1_expected_prev[7] !== last_dout1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp[7] = dout1_expected_prev[7];
	end
	if (
		( dout2_expected_prev[0] !== 1'bx ) && ( dout2_prev[0] !== dout2_expected_prev[0] )
		&& ((dout2_expected_prev[0] !== last_dout2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[0] = dout2_expected_prev[0];
	end
	if (
		( dout2_expected_prev[1] !== 1'bx ) && ( dout2_prev[1] !== dout2_expected_prev[1] )
		&& ((dout2_expected_prev[1] !== last_dout2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[1] = dout2_expected_prev[1];
	end
	if (
		( dout2_expected_prev[2] !== 1'bx ) && ( dout2_prev[2] !== dout2_expected_prev[2] )
		&& ((dout2_expected_prev[2] !== last_dout2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[2] = dout2_expected_prev[2];
	end
	if (
		( dout2_expected_prev[3] !== 1'bx ) && ( dout2_prev[3] !== dout2_expected_prev[3] )
		&& ((dout2_expected_prev[3] !== last_dout2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[3] = dout2_expected_prev[3];
	end
	if (
		( dout2_expected_prev[4] !== 1'bx ) && ( dout2_prev[4] !== dout2_expected_prev[4] )
		&& ((dout2_expected_prev[4] !== last_dout2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[4] = dout2_expected_prev[4];
	end
	if (
		( dout2_expected_prev[5] !== 1'bx ) && ( dout2_prev[5] !== dout2_expected_prev[5] )
		&& ((dout2_expected_prev[5] !== last_dout2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[5] = dout2_expected_prev[5];
	end
	if (
		( dout2_expected_prev[6] !== 1'bx ) && ( dout2_prev[6] !== dout2_expected_prev[6] )
		&& ((dout2_expected_prev[6] !== last_dout2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[6] = dout2_expected_prev[6];
	end
	if (
		( dout2_expected_prev[7] !== 1'bx ) && ( dout2_prev[7] !== dout2_expected_prev[7] )
		&& ((dout2_expected_prev[7] !== last_dout2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp[7] = dout2_expected_prev[7];
	end
	if (
		( dout3_expected_prev[0] !== 1'bx ) && ( dout3_prev[0] !== dout3_expected_prev[0] )
		&& ((dout3_expected_prev[0] !== last_dout3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[0] = dout3_expected_prev[0];
	end
	if (
		( dout3_expected_prev[1] !== 1'bx ) && ( dout3_prev[1] !== dout3_expected_prev[1] )
		&& ((dout3_expected_prev[1] !== last_dout3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[1] = dout3_expected_prev[1];
	end
	if (
		( dout3_expected_prev[2] !== 1'bx ) && ( dout3_prev[2] !== dout3_expected_prev[2] )
		&& ((dout3_expected_prev[2] !== last_dout3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[2] = dout3_expected_prev[2];
	end
	if (
		( dout3_expected_prev[3] !== 1'bx ) && ( dout3_prev[3] !== dout3_expected_prev[3] )
		&& ((dout3_expected_prev[3] !== last_dout3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[3] = dout3_expected_prev[3];
	end
	if (
		( dout3_expected_prev[4] !== 1'bx ) && ( dout3_prev[4] !== dout3_expected_prev[4] )
		&& ((dout3_expected_prev[4] !== last_dout3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[4] = dout3_expected_prev[4];
	end
	if (
		( dout3_expected_prev[5] !== 1'bx ) && ( dout3_prev[5] !== dout3_expected_prev[5] )
		&& ((dout3_expected_prev[5] !== last_dout3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[5] = dout3_expected_prev[5];
	end
	if (
		( dout3_expected_prev[6] !== 1'bx ) && ( dout3_prev[6] !== dout3_expected_prev[6] )
		&& ((dout3_expected_prev[6] !== last_dout3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[6] = dout3_expected_prev[6];
	end
	if (
		( dout3_expected_prev[7] !== 1'bx ) && ( dout3_prev[7] !== dout3_expected_prev[7] )
		&& ((dout3_expected_prev[7] !== last_dout3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout3_expected_prev);
		$display ("     Real value = %b", dout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dout3_exp[7] = dout3_expected_prev[7];
	end
	if (
		( dout4_expected_prev[0] !== 1'bx ) && ( dout4_prev[0] !== dout4_expected_prev[0] )
		&& ((dout4_expected_prev[0] !== last_dout4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[0] = dout4_expected_prev[0];
	end
	if (
		( dout4_expected_prev[1] !== 1'bx ) && ( dout4_prev[1] !== dout4_expected_prev[1] )
		&& ((dout4_expected_prev[1] !== last_dout4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[1] = dout4_expected_prev[1];
	end
	if (
		( dout4_expected_prev[2] !== 1'bx ) && ( dout4_prev[2] !== dout4_expected_prev[2] )
		&& ((dout4_expected_prev[2] !== last_dout4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[2] = dout4_expected_prev[2];
	end
	if (
		( dout4_expected_prev[3] !== 1'bx ) && ( dout4_prev[3] !== dout4_expected_prev[3] )
		&& ((dout4_expected_prev[3] !== last_dout4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[3] = dout4_expected_prev[3];
	end
	if (
		( dout4_expected_prev[4] !== 1'bx ) && ( dout4_prev[4] !== dout4_expected_prev[4] )
		&& ((dout4_expected_prev[4] !== last_dout4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[4] = dout4_expected_prev[4];
	end
	if (
		( dout4_expected_prev[5] !== 1'bx ) && ( dout4_prev[5] !== dout4_expected_prev[5] )
		&& ((dout4_expected_prev[5] !== last_dout4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[5] = dout4_expected_prev[5];
	end
	if (
		( dout4_expected_prev[6] !== 1'bx ) && ( dout4_prev[6] !== dout4_expected_prev[6] )
		&& ((dout4_expected_prev[6] !== last_dout4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[6] = dout4_expected_prev[6];
	end
	if (
		( dout4_expected_prev[7] !== 1'bx ) && ( dout4_prev[7] !== dout4_expected_prev[7] )
		&& ((dout4_expected_prev[7] !== last_dout4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout4_expected_prev);
		$display ("     Real value = %b", dout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dout4_exp[7] = dout4_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module quling_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] din0;
reg [7:0] din1;
reg [7:0] din2;
reg [7:0] din3;
reg [7:0] din4;
// wires                                               
wire [7:0] dout0;
wire [7:0] dout1;
wire [7:0] dout2;
wire [7:0] dout3;
wire [7:0] dout4;

wire sampler;                             

// assign statements (if any)                          
quling i1 (
// port map - connection between master ports and signals/registers   
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.dout0(dout0),
	.dout1(dout1),
	.dout2(dout2),
	.dout3(dout3),
	.dout4(dout4)
);
// din0[ 7 ]
initial
begin
	din0[7] = 1'b0;
end 
// din0[ 6 ]
initial
begin
	din0[6] = 1'b0;
end 
// din0[ 5 ]
initial
begin
	din0[5] = 1'b0;
end 
// din0[ 4 ]
initial
begin
	din0[4] = 1'b0;
end 
// din0[ 3 ]
initial
begin
	din0[3] = 1'b0;
end 
// din0[ 2 ]
initial
begin
	din0[2] = 1'b1;
end 
// din0[ 1 ]
initial
begin
	din0[1] = 1'b1;
end 
// din0[ 0 ]
initial
begin
	din0[0] = 1'b0;
end 
// din1[ 7 ]
initial
begin
	din1[7] = 1'b0;
end 
// din1[ 6 ]
initial
begin
	din1[6] = 1'b0;
end 
// din1[ 5 ]
initial
begin
	din1[5] = 1'b1;
end 
// din1[ 4 ]
initial
begin
	din1[4] = 1'b1;
end 
// din1[ 3 ]
initial
begin
	din1[3] = 1'b1;
end 
// din1[ 2 ]
initial
begin
	din1[2] = 1'b1;
end 
// din1[ 1 ]
initial
begin
	din1[1] = 1'b1;
end 
// din1[ 0 ]
initial
begin
	din1[0] = 1'b1;
end 
// din2[ 7 ]
initial
begin
	din2[7] = 1'b0;
end 
// din2[ 6 ]
initial
begin
	din2[6] = 1'b0;
end 
// din2[ 5 ]
initial
begin
	din2[5] = 1'b1;
end 
// din2[ 4 ]
initial
begin
	din2[4] = 1'b1;
end 
// din2[ 3 ]
initial
begin
	din2[3] = 1'b1;
end 
// din2[ 2 ]
initial
begin
	din2[2] = 1'b1;
end 
// din2[ 1 ]
initial
begin
	din2[1] = 1'b1;
end 
// din2[ 0 ]
initial
begin
	din2[0] = 1'b1;
end 
// din3[ 7 ]
initial
begin
	din3[7] = 1'b1;
end 
// din3[ 6 ]
initial
begin
	din3[6] = 1'b0;
end 
// din3[ 5 ]
initial
begin
	din3[5] = 1'b1;
end 
// din3[ 4 ]
initial
begin
	din3[4] = 1'b1;
end 
// din3[ 3 ]
initial
begin
	din3[3] = 1'b1;
end 
// din3[ 2 ]
initial
begin
	din3[2] = 1'b1;
end 
// din3[ 1 ]
initial
begin
	din3[1] = 1'b1;
end 
// din3[ 0 ]
initial
begin
	din3[0] = 1'b1;
end 
// din4[ 7 ]
initial
begin
	din4[7] = 1'b0;
end 
// din4[ 6 ]
initial
begin
	din4[6] = 1'b0;
end 
// din4[ 5 ]
initial
begin
	din4[5] = 1'b1;
end 
// din4[ 4 ]
initial
begin
	din4[4] = 1'b1;
end 
// din4[ 3 ]
initial
begin
	din4[3] = 1'b1;
end 
// din4[ 2 ]
initial
begin
	din4[2] = 1'b1;
end 
// din4[ 1 ]
initial
begin
	din4[1] = 1'b1;
end 
// din4[ 0 ]
initial
begin
	din4[0] = 1'b1;
end 

quling_vlg_sample_tst tb_sample (
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.sampler_tx(sampler)
);

quling_vlg_check_tst tb_out(
	.dout0(dout0),
	.dout1(dout1),
	.dout2(dout2),
	.dout3(dout3),
	.dout4(dout4),
	.sampler_rx(sampler)
);
endmodule

