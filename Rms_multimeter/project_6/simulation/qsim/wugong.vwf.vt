// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2023 19:50:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wugong
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wugong_vlg_sample_tst(
	clk,
	shizai,
	yougong,
	sampler_tx
);
input  clk;
input [17:0] shizai;
input [17:0] yougong;
output sampler_tx;

reg sample;
time current_time;
always @(clk or shizai or yougong)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module wugong_vlg_check_tst (
	wugong,
	wugong_pinfang_int,
	sampler_rx
);
input [17:0] wugong;
input [30:0] wugong_pinfang_int;
input sampler_rx;

reg [17:0] wugong_expected;
reg [30:0] wugong_pinfang_int_expected;

reg [17:0] wugong_prev;
reg [30:0] wugong_pinfang_int_prev;

reg [17:0] wugong_expected_prev;
reg [30:0] wugong_pinfang_int_expected_prev;

reg [17:0] last_wugong_exp;
reg [30:0] last_wugong_pinfang_int_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	wugong_prev = wugong;
	wugong_pinfang_int_prev = wugong_pinfang_int;
end

// update expected /o prevs

always @(trigger)
begin
	wugong_expected_prev = wugong_expected;
	wugong_pinfang_int_expected_prev = wugong_pinfang_int_expected;
end


// expected wugong[ 17 ]
initial
begin
	wugong_expected[17] = 1'bX;
end 
// expected wugong[ 16 ]
initial
begin
	wugong_expected[16] = 1'bX;
end 
// expected wugong[ 15 ]
initial
begin
	wugong_expected[15] = 1'bX;
end 
// expected wugong[ 14 ]
initial
begin
	wugong_expected[14] = 1'bX;
end 
// expected wugong[ 13 ]
initial
begin
	wugong_expected[13] = 1'bX;
end 
// expected wugong[ 12 ]
initial
begin
	wugong_expected[12] = 1'bX;
end 
// expected wugong[ 11 ]
initial
begin
	wugong_expected[11] = 1'bX;
end 
// expected wugong[ 10 ]
initial
begin
	wugong_expected[10] = 1'bX;
end 
// expected wugong[ 9 ]
initial
begin
	wugong_expected[9] = 1'bX;
end 
// expected wugong[ 8 ]
initial
begin
	wugong_expected[8] = 1'bX;
end 
// expected wugong[ 7 ]
initial
begin
	wugong_expected[7] = 1'bX;
end 
// expected wugong[ 6 ]
initial
begin
	wugong_expected[6] = 1'bX;
end 
// expected wugong[ 5 ]
initial
begin
	wugong_expected[5] = 1'bX;
end 
// expected wugong[ 4 ]
initial
begin
	wugong_expected[4] = 1'bX;
end 
// expected wugong[ 3 ]
initial
begin
	wugong_expected[3] = 1'bX;
end 
// expected wugong[ 2 ]
initial
begin
	wugong_expected[2] = 1'bX;
end 
// expected wugong[ 1 ]
initial
begin
	wugong_expected[1] = 1'bX;
end 
// expected wugong[ 0 ]
initial
begin
	wugong_expected[0] = 1'bX;
end 
// expected wugong_pinfang_int[ 30 ]
initial
begin
	wugong_pinfang_int_expected[30] = 1'bX;
end 
// expected wugong_pinfang_int[ 29 ]
initial
begin
	wugong_pinfang_int_expected[29] = 1'bX;
end 
// expected wugong_pinfang_int[ 28 ]
initial
begin
	wugong_pinfang_int_expected[28] = 1'bX;
end 
// expected wugong_pinfang_int[ 27 ]
initial
begin
	wugong_pinfang_int_expected[27] = 1'bX;
end 
// expected wugong_pinfang_int[ 26 ]
initial
begin
	wugong_pinfang_int_expected[26] = 1'bX;
end 
// expected wugong_pinfang_int[ 25 ]
initial
begin
	wugong_pinfang_int_expected[25] = 1'bX;
end 
// expected wugong_pinfang_int[ 24 ]
initial
begin
	wugong_pinfang_int_expected[24] = 1'bX;
end 
// expected wugong_pinfang_int[ 23 ]
initial
begin
	wugong_pinfang_int_expected[23] = 1'bX;
end 
// expected wugong_pinfang_int[ 22 ]
initial
begin
	wugong_pinfang_int_expected[22] = 1'bX;
end 
// expected wugong_pinfang_int[ 21 ]
initial
begin
	wugong_pinfang_int_expected[21] = 1'bX;
end 
// expected wugong_pinfang_int[ 20 ]
initial
begin
	wugong_pinfang_int_expected[20] = 1'bX;
end 
// expected wugong_pinfang_int[ 19 ]
initial
begin
	wugong_pinfang_int_expected[19] = 1'bX;
end 
// expected wugong_pinfang_int[ 18 ]
initial
begin
	wugong_pinfang_int_expected[18] = 1'bX;
end 
// expected wugong_pinfang_int[ 17 ]
initial
begin
	wugong_pinfang_int_expected[17] = 1'bX;
end 
// expected wugong_pinfang_int[ 16 ]
initial
begin
	wugong_pinfang_int_expected[16] = 1'bX;
end 
// expected wugong_pinfang_int[ 15 ]
initial
begin
	wugong_pinfang_int_expected[15] = 1'bX;
end 
// expected wugong_pinfang_int[ 14 ]
initial
begin
	wugong_pinfang_int_expected[14] = 1'bX;
end 
// expected wugong_pinfang_int[ 13 ]
initial
begin
	wugong_pinfang_int_expected[13] = 1'bX;
end 
// expected wugong_pinfang_int[ 12 ]
initial
begin
	wugong_pinfang_int_expected[12] = 1'bX;
end 
// expected wugong_pinfang_int[ 11 ]
initial
begin
	wugong_pinfang_int_expected[11] = 1'bX;
end 
// expected wugong_pinfang_int[ 10 ]
initial
begin
	wugong_pinfang_int_expected[10] = 1'bX;
end 
// expected wugong_pinfang_int[ 9 ]
initial
begin
	wugong_pinfang_int_expected[9] = 1'bX;
end 
// expected wugong_pinfang_int[ 8 ]
initial
begin
	wugong_pinfang_int_expected[8] = 1'bX;
end 
// expected wugong_pinfang_int[ 7 ]
initial
begin
	wugong_pinfang_int_expected[7] = 1'bX;
end 
// expected wugong_pinfang_int[ 6 ]
initial
begin
	wugong_pinfang_int_expected[6] = 1'bX;
end 
// expected wugong_pinfang_int[ 5 ]
initial
begin
	wugong_pinfang_int_expected[5] = 1'bX;
end 
// expected wugong_pinfang_int[ 4 ]
initial
begin
	wugong_pinfang_int_expected[4] = 1'bX;
end 
// expected wugong_pinfang_int[ 3 ]
initial
begin
	wugong_pinfang_int_expected[3] = 1'bX;
end 
// expected wugong_pinfang_int[ 2 ]
initial
begin
	wugong_pinfang_int_expected[2] = 1'bX;
end 
// expected wugong_pinfang_int[ 1 ]
initial
begin
	wugong_pinfang_int_expected[1] = 1'bX;
end 
// expected wugong_pinfang_int[ 0 ]
initial
begin
	wugong_pinfang_int_expected[0] = 1'bX;
end 
// generate trigger
always @(wugong_expected or wugong or wugong_pinfang_int_expected or wugong_pinfang_int)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected wugong = %b | expected wugong_pinfang_int = %b | ",wugong_expected_prev,wugong_pinfang_int_expected_prev);
	$display("| real wugong = %b | real wugong_pinfang_int = %b | ",wugong_prev,wugong_pinfang_int_prev);
`endif
	if (
		( wugong_expected_prev[0] !== 1'bx ) && ( wugong_prev[0] !== wugong_expected_prev[0] )
		&& ((wugong_expected_prev[0] !== last_wugong_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[0] = wugong_expected_prev[0];
	end
	if (
		( wugong_expected_prev[1] !== 1'bx ) && ( wugong_prev[1] !== wugong_expected_prev[1] )
		&& ((wugong_expected_prev[1] !== last_wugong_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[1] = wugong_expected_prev[1];
	end
	if (
		( wugong_expected_prev[2] !== 1'bx ) && ( wugong_prev[2] !== wugong_expected_prev[2] )
		&& ((wugong_expected_prev[2] !== last_wugong_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[2] = wugong_expected_prev[2];
	end
	if (
		( wugong_expected_prev[3] !== 1'bx ) && ( wugong_prev[3] !== wugong_expected_prev[3] )
		&& ((wugong_expected_prev[3] !== last_wugong_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[3] = wugong_expected_prev[3];
	end
	if (
		( wugong_expected_prev[4] !== 1'bx ) && ( wugong_prev[4] !== wugong_expected_prev[4] )
		&& ((wugong_expected_prev[4] !== last_wugong_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[4] = wugong_expected_prev[4];
	end
	if (
		( wugong_expected_prev[5] !== 1'bx ) && ( wugong_prev[5] !== wugong_expected_prev[5] )
		&& ((wugong_expected_prev[5] !== last_wugong_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[5] = wugong_expected_prev[5];
	end
	if (
		( wugong_expected_prev[6] !== 1'bx ) && ( wugong_prev[6] !== wugong_expected_prev[6] )
		&& ((wugong_expected_prev[6] !== last_wugong_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[6] = wugong_expected_prev[6];
	end
	if (
		( wugong_expected_prev[7] !== 1'bx ) && ( wugong_prev[7] !== wugong_expected_prev[7] )
		&& ((wugong_expected_prev[7] !== last_wugong_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[7] = wugong_expected_prev[7];
	end
	if (
		( wugong_expected_prev[8] !== 1'bx ) && ( wugong_prev[8] !== wugong_expected_prev[8] )
		&& ((wugong_expected_prev[8] !== last_wugong_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[8] = wugong_expected_prev[8];
	end
	if (
		( wugong_expected_prev[9] !== 1'bx ) && ( wugong_prev[9] !== wugong_expected_prev[9] )
		&& ((wugong_expected_prev[9] !== last_wugong_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[9] = wugong_expected_prev[9];
	end
	if (
		( wugong_expected_prev[10] !== 1'bx ) && ( wugong_prev[10] !== wugong_expected_prev[10] )
		&& ((wugong_expected_prev[10] !== last_wugong_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[10] = wugong_expected_prev[10];
	end
	if (
		( wugong_expected_prev[11] !== 1'bx ) && ( wugong_prev[11] !== wugong_expected_prev[11] )
		&& ((wugong_expected_prev[11] !== last_wugong_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[11] = wugong_expected_prev[11];
	end
	if (
		( wugong_expected_prev[12] !== 1'bx ) && ( wugong_prev[12] !== wugong_expected_prev[12] )
		&& ((wugong_expected_prev[12] !== last_wugong_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[12] = wugong_expected_prev[12];
	end
	if (
		( wugong_expected_prev[13] !== 1'bx ) && ( wugong_prev[13] !== wugong_expected_prev[13] )
		&& ((wugong_expected_prev[13] !== last_wugong_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[13] = wugong_expected_prev[13];
	end
	if (
		( wugong_expected_prev[14] !== 1'bx ) && ( wugong_prev[14] !== wugong_expected_prev[14] )
		&& ((wugong_expected_prev[14] !== last_wugong_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[14] = wugong_expected_prev[14];
	end
	if (
		( wugong_expected_prev[15] !== 1'bx ) && ( wugong_prev[15] !== wugong_expected_prev[15] )
		&& ((wugong_expected_prev[15] !== last_wugong_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[15] = wugong_expected_prev[15];
	end
	if (
		( wugong_expected_prev[16] !== 1'bx ) && ( wugong_prev[16] !== wugong_expected_prev[16] )
		&& ((wugong_expected_prev[16] !== last_wugong_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[16] = wugong_expected_prev[16];
	end
	if (
		( wugong_expected_prev[17] !== 1'bx ) && ( wugong_prev[17] !== wugong_expected_prev[17] )
		&& ((wugong_expected_prev[17] !== last_wugong_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_expected_prev);
		$display ("     Real value = %b", wugong_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_wugong_exp[17] = wugong_expected_prev[17];
	end
	if (
		( wugong_pinfang_int_expected_prev[0] !== 1'bx ) && ( wugong_pinfang_int_prev[0] !== wugong_pinfang_int_expected_prev[0] )
		&& ((wugong_pinfang_int_expected_prev[0] !== last_wugong_pinfang_int_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[0] = wugong_pinfang_int_expected_prev[0];
	end
	if (
		( wugong_pinfang_int_expected_prev[1] !== 1'bx ) && ( wugong_pinfang_int_prev[1] !== wugong_pinfang_int_expected_prev[1] )
		&& ((wugong_pinfang_int_expected_prev[1] !== last_wugong_pinfang_int_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[1] = wugong_pinfang_int_expected_prev[1];
	end
	if (
		( wugong_pinfang_int_expected_prev[2] !== 1'bx ) && ( wugong_pinfang_int_prev[2] !== wugong_pinfang_int_expected_prev[2] )
		&& ((wugong_pinfang_int_expected_prev[2] !== last_wugong_pinfang_int_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[2] = wugong_pinfang_int_expected_prev[2];
	end
	if (
		( wugong_pinfang_int_expected_prev[3] !== 1'bx ) && ( wugong_pinfang_int_prev[3] !== wugong_pinfang_int_expected_prev[3] )
		&& ((wugong_pinfang_int_expected_prev[3] !== last_wugong_pinfang_int_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[3] = wugong_pinfang_int_expected_prev[3];
	end
	if (
		( wugong_pinfang_int_expected_prev[4] !== 1'bx ) && ( wugong_pinfang_int_prev[4] !== wugong_pinfang_int_expected_prev[4] )
		&& ((wugong_pinfang_int_expected_prev[4] !== last_wugong_pinfang_int_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[4] = wugong_pinfang_int_expected_prev[4];
	end
	if (
		( wugong_pinfang_int_expected_prev[5] !== 1'bx ) && ( wugong_pinfang_int_prev[5] !== wugong_pinfang_int_expected_prev[5] )
		&& ((wugong_pinfang_int_expected_prev[5] !== last_wugong_pinfang_int_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[5] = wugong_pinfang_int_expected_prev[5];
	end
	if (
		( wugong_pinfang_int_expected_prev[6] !== 1'bx ) && ( wugong_pinfang_int_prev[6] !== wugong_pinfang_int_expected_prev[6] )
		&& ((wugong_pinfang_int_expected_prev[6] !== last_wugong_pinfang_int_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[6] = wugong_pinfang_int_expected_prev[6];
	end
	if (
		( wugong_pinfang_int_expected_prev[7] !== 1'bx ) && ( wugong_pinfang_int_prev[7] !== wugong_pinfang_int_expected_prev[7] )
		&& ((wugong_pinfang_int_expected_prev[7] !== last_wugong_pinfang_int_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[7] = wugong_pinfang_int_expected_prev[7];
	end
	if (
		( wugong_pinfang_int_expected_prev[8] !== 1'bx ) && ( wugong_pinfang_int_prev[8] !== wugong_pinfang_int_expected_prev[8] )
		&& ((wugong_pinfang_int_expected_prev[8] !== last_wugong_pinfang_int_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[8] = wugong_pinfang_int_expected_prev[8];
	end
	if (
		( wugong_pinfang_int_expected_prev[9] !== 1'bx ) && ( wugong_pinfang_int_prev[9] !== wugong_pinfang_int_expected_prev[9] )
		&& ((wugong_pinfang_int_expected_prev[9] !== last_wugong_pinfang_int_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[9] = wugong_pinfang_int_expected_prev[9];
	end
	if (
		( wugong_pinfang_int_expected_prev[10] !== 1'bx ) && ( wugong_pinfang_int_prev[10] !== wugong_pinfang_int_expected_prev[10] )
		&& ((wugong_pinfang_int_expected_prev[10] !== last_wugong_pinfang_int_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[10] = wugong_pinfang_int_expected_prev[10];
	end
	if (
		( wugong_pinfang_int_expected_prev[11] !== 1'bx ) && ( wugong_pinfang_int_prev[11] !== wugong_pinfang_int_expected_prev[11] )
		&& ((wugong_pinfang_int_expected_prev[11] !== last_wugong_pinfang_int_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[11] = wugong_pinfang_int_expected_prev[11];
	end
	if (
		( wugong_pinfang_int_expected_prev[12] !== 1'bx ) && ( wugong_pinfang_int_prev[12] !== wugong_pinfang_int_expected_prev[12] )
		&& ((wugong_pinfang_int_expected_prev[12] !== last_wugong_pinfang_int_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[12] = wugong_pinfang_int_expected_prev[12];
	end
	if (
		( wugong_pinfang_int_expected_prev[13] !== 1'bx ) && ( wugong_pinfang_int_prev[13] !== wugong_pinfang_int_expected_prev[13] )
		&& ((wugong_pinfang_int_expected_prev[13] !== last_wugong_pinfang_int_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[13] = wugong_pinfang_int_expected_prev[13];
	end
	if (
		( wugong_pinfang_int_expected_prev[14] !== 1'bx ) && ( wugong_pinfang_int_prev[14] !== wugong_pinfang_int_expected_prev[14] )
		&& ((wugong_pinfang_int_expected_prev[14] !== last_wugong_pinfang_int_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[14] = wugong_pinfang_int_expected_prev[14];
	end
	if (
		( wugong_pinfang_int_expected_prev[15] !== 1'bx ) && ( wugong_pinfang_int_prev[15] !== wugong_pinfang_int_expected_prev[15] )
		&& ((wugong_pinfang_int_expected_prev[15] !== last_wugong_pinfang_int_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[15] = wugong_pinfang_int_expected_prev[15];
	end
	if (
		( wugong_pinfang_int_expected_prev[16] !== 1'bx ) && ( wugong_pinfang_int_prev[16] !== wugong_pinfang_int_expected_prev[16] )
		&& ((wugong_pinfang_int_expected_prev[16] !== last_wugong_pinfang_int_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[16] = wugong_pinfang_int_expected_prev[16];
	end
	if (
		( wugong_pinfang_int_expected_prev[17] !== 1'bx ) && ( wugong_pinfang_int_prev[17] !== wugong_pinfang_int_expected_prev[17] )
		&& ((wugong_pinfang_int_expected_prev[17] !== last_wugong_pinfang_int_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[17] = wugong_pinfang_int_expected_prev[17];
	end
	if (
		( wugong_pinfang_int_expected_prev[18] !== 1'bx ) && ( wugong_pinfang_int_prev[18] !== wugong_pinfang_int_expected_prev[18] )
		&& ((wugong_pinfang_int_expected_prev[18] !== last_wugong_pinfang_int_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[18] = wugong_pinfang_int_expected_prev[18];
	end
	if (
		( wugong_pinfang_int_expected_prev[19] !== 1'bx ) && ( wugong_pinfang_int_prev[19] !== wugong_pinfang_int_expected_prev[19] )
		&& ((wugong_pinfang_int_expected_prev[19] !== last_wugong_pinfang_int_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[19] = wugong_pinfang_int_expected_prev[19];
	end
	if (
		( wugong_pinfang_int_expected_prev[20] !== 1'bx ) && ( wugong_pinfang_int_prev[20] !== wugong_pinfang_int_expected_prev[20] )
		&& ((wugong_pinfang_int_expected_prev[20] !== last_wugong_pinfang_int_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[20] = wugong_pinfang_int_expected_prev[20];
	end
	if (
		( wugong_pinfang_int_expected_prev[21] !== 1'bx ) && ( wugong_pinfang_int_prev[21] !== wugong_pinfang_int_expected_prev[21] )
		&& ((wugong_pinfang_int_expected_prev[21] !== last_wugong_pinfang_int_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[21] = wugong_pinfang_int_expected_prev[21];
	end
	if (
		( wugong_pinfang_int_expected_prev[22] !== 1'bx ) && ( wugong_pinfang_int_prev[22] !== wugong_pinfang_int_expected_prev[22] )
		&& ((wugong_pinfang_int_expected_prev[22] !== last_wugong_pinfang_int_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[22] = wugong_pinfang_int_expected_prev[22];
	end
	if (
		( wugong_pinfang_int_expected_prev[23] !== 1'bx ) && ( wugong_pinfang_int_prev[23] !== wugong_pinfang_int_expected_prev[23] )
		&& ((wugong_pinfang_int_expected_prev[23] !== last_wugong_pinfang_int_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[23] = wugong_pinfang_int_expected_prev[23];
	end
	if (
		( wugong_pinfang_int_expected_prev[24] !== 1'bx ) && ( wugong_pinfang_int_prev[24] !== wugong_pinfang_int_expected_prev[24] )
		&& ((wugong_pinfang_int_expected_prev[24] !== last_wugong_pinfang_int_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[24] = wugong_pinfang_int_expected_prev[24];
	end
	if (
		( wugong_pinfang_int_expected_prev[25] !== 1'bx ) && ( wugong_pinfang_int_prev[25] !== wugong_pinfang_int_expected_prev[25] )
		&& ((wugong_pinfang_int_expected_prev[25] !== last_wugong_pinfang_int_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[25] = wugong_pinfang_int_expected_prev[25];
	end
	if (
		( wugong_pinfang_int_expected_prev[26] !== 1'bx ) && ( wugong_pinfang_int_prev[26] !== wugong_pinfang_int_expected_prev[26] )
		&& ((wugong_pinfang_int_expected_prev[26] !== last_wugong_pinfang_int_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[26] = wugong_pinfang_int_expected_prev[26];
	end
	if (
		( wugong_pinfang_int_expected_prev[27] !== 1'bx ) && ( wugong_pinfang_int_prev[27] !== wugong_pinfang_int_expected_prev[27] )
		&& ((wugong_pinfang_int_expected_prev[27] !== last_wugong_pinfang_int_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[27] = wugong_pinfang_int_expected_prev[27];
	end
	if (
		( wugong_pinfang_int_expected_prev[28] !== 1'bx ) && ( wugong_pinfang_int_prev[28] !== wugong_pinfang_int_expected_prev[28] )
		&& ((wugong_pinfang_int_expected_prev[28] !== last_wugong_pinfang_int_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[28] = wugong_pinfang_int_expected_prev[28];
	end
	if (
		( wugong_pinfang_int_expected_prev[29] !== 1'bx ) && ( wugong_pinfang_int_prev[29] !== wugong_pinfang_int_expected_prev[29] )
		&& ((wugong_pinfang_int_expected_prev[29] !== last_wugong_pinfang_int_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[29] = wugong_pinfang_int_expected_prev[29];
	end
	if (
		( wugong_pinfang_int_expected_prev[30] !== 1'bx ) && ( wugong_pinfang_int_prev[30] !== wugong_pinfang_int_expected_prev[30] )
		&& ((wugong_pinfang_int_expected_prev[30] !== last_wugong_pinfang_int_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wugong_pinfang_int[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wugong_pinfang_int_expected_prev);
		$display ("     Real value = %b", wugong_pinfang_int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_wugong_pinfang_int_exp[30] = wugong_pinfang_int_expected_prev[30];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module wugong_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [17:0] shizai;
reg [17:0] yougong;
// wires                                               
wire [17:0] wugong;
wire [30:0] wugong_pinfang_int;

wire sampler;                             

// assign statements (if any)                          
wugong i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.shizai(shizai),
	.wugong(wugong),
	.wugong_pinfang_int(wugong_pinfang_int),
	.yougong(yougong)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// shizai[ 17 ]
initial
begin
	shizai[17] = 1'b0;
end 
// shizai[ 16 ]
initial
begin
	shizai[16] = 1'b0;
end 
// shizai[ 15 ]
initial
begin
	shizai[15] = 1'b0;
end 
// shizai[ 14 ]
initial
begin
	shizai[14] = 1'b0;
end 
// shizai[ 13 ]
initial
begin
	shizai[13] = 1'b0;
end 
// shizai[ 12 ]
initial
begin
	shizai[12] = 1'b0;
end 
// shizai[ 11 ]
initial
begin
	shizai[11] = 1'b0;
end 
// shizai[ 10 ]
initial
begin
	shizai[10] = 1'b0;
end 
// shizai[ 9 ]
initial
begin
	shizai[9] = 1'b0;
end 
// shizai[ 8 ]
initial
begin
	shizai[8] = 1'b0;
end 
// shizai[ 7 ]
initial
begin
	shizai[7] = 1'b0;
end 
// shizai[ 6 ]
initial
begin
	shizai[6] = 1'b0;
end 
// shizai[ 5 ]
initial
begin
	shizai[5] = 1'b0;
end 
// shizai[ 4 ]
initial
begin
	shizai[4] = 1'b0;
end 
// shizai[ 3 ]
initial
begin
	shizai[3] = 1'b0;
end 
// shizai[ 2 ]
initial
begin
	shizai[2] = 1'b1;
end 
// shizai[ 1 ]
initial
begin
	shizai[1] = 1'b0;
end 
// shizai[ 0 ]
initial
begin
	shizai[0] = 1'b1;
end 
// yougong[ 17 ]
initial
begin
	yougong[17] = 1'b0;
end 
// yougong[ 16 ]
initial
begin
	yougong[16] = 1'b0;
end 
// yougong[ 15 ]
initial
begin
	yougong[15] = 1'b0;
end 
// yougong[ 14 ]
initial
begin
	yougong[14] = 1'b0;
end 
// yougong[ 13 ]
initial
begin
	yougong[13] = 1'b0;
end 
// yougong[ 12 ]
initial
begin
	yougong[12] = 1'b0;
end 
// yougong[ 11 ]
initial
begin
	yougong[11] = 1'b0;
end 
// yougong[ 10 ]
initial
begin
	yougong[10] = 1'b0;
end 
// yougong[ 9 ]
initial
begin
	yougong[9] = 1'b0;
end 
// yougong[ 8 ]
initial
begin
	yougong[8] = 1'b0;
end 
// yougong[ 7 ]
initial
begin
	yougong[7] = 1'b0;
end 
// yougong[ 6 ]
initial
begin
	yougong[6] = 1'b0;
end 
// yougong[ 5 ]
initial
begin
	yougong[5] = 1'b0;
end 
// yougong[ 4 ]
initial
begin
	yougong[4] = 1'b0;
end 
// yougong[ 3 ]
initial
begin
	yougong[3] = 1'b0;
end 
// yougong[ 2 ]
initial
begin
	yougong[2] = 1'b1;
end 
// yougong[ 1 ]
initial
begin
	yougong[1] = 1'b0;
end 
// yougong[ 0 ]
initial
begin
	yougong[0] = 1'b0;
end 

wugong_vlg_sample_tst tb_sample (
	.clk(clk),
	.shizai(shizai),
	.yougong(yougong),
	.sampler_tx(sampler)
);

wugong_vlg_check_tst tb_out(
	.wugong(wugong),
	.wugong_pinfang_int(wugong_pinfang_int),
	.sampler_rx(sampler)
);
endmodule

